
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800243c  0800243c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800243c  0800243c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200000d0  08002510  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002510  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055af  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000100e  00000000  00000000  000256ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  000266c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00026d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035b5  00000000  00000000  000272b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004493  00000000  00000000  0002a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075bb0  00000000  00000000  0002ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a48b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017dc  00000000  00000000  000a492c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800240c 	.word	0x0800240c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	0800240c 	.word	0x0800240c

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	641a      	str	r2, [r3, #64]	; 0x40
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <LL_TIM_Init+0xd4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f2:	d003      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <LL_TIM_Init+0xd8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <LL_TIM_Init+0xd4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d013      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d00f      	beq.n	800063a <LL_TIM_Init+0x6a>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <LL_TIM_Init+0xd8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00b      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <LL_TIM_Init+0xdc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <LL_TIM_Init+0xe0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d003      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff3a 	bl	80004ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff26 	bl	80004b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LL_TIM_Init+0xd4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00b      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LL_TIM_Init+0xdc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <LL_TIM_Init+0xb6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LL_TIM_Init+0xe0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d003      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff2c 	bl	80004ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff8b 	bl	80005ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40014000 	.word	0x40014000
 80006b0:	40014400 	.word	0x40014400
 80006b4:	40014800 	.word	0x40014800

080006b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ce:	d01f      	beq.n	8000710 <LL_TIM_OC_Init+0x58>
 80006d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006d4:	d804      	bhi.n	80006e0 <LL_TIM_OC_Init+0x28>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00c      	beq.n	80006f4 <LL_TIM_OC_Init+0x3c>
 80006da:	2b10      	cmp	r3, #16
 80006dc:	d011      	beq.n	8000702 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80006de:	e033      	b.n	8000748 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80006e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e4:	d022      	beq.n	800072c <LL_TIM_OC_Init+0x74>
 80006e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ea:	d026      	beq.n	800073a <LL_TIM_OC_Init+0x82>
 80006ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f0:	d015      	beq.n	800071e <LL_TIM_OC_Init+0x66>
      break;
 80006f2:	e029      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f82c 	bl	8000754 <OC1Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]
      break;
 8000700:	e022      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 f8a5 	bl	8000854 <OC2Config>
 800070a:	4603      	mov	r3, r0
 800070c:	75fb      	strb	r3, [r7, #23]
      break;
 800070e:	e01b      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f000 f922 	bl	800095c <OC3Config>
 8000718:	4603      	mov	r3, r0
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e014      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 f99f 	bl	8000a64 <OC4Config>
 8000726:	4603      	mov	r3, r0
 8000728:	75fb      	strb	r3, [r7, #23]
      break;
 800072a:	e00d      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 fa04 	bl	8000b3c <OC5Config>
 8000734:	4603      	mov	r3, r0
 8000736:	75fb      	strb	r3, [r7, #23]
      break;
 8000738:	e006      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 fa5f 	bl	8000c00 <OC6Config>
 8000742:	4603      	mov	r3, r0
 8000744:	75fb      	strb	r3, [r7, #23]
      break;
 8000746:	bf00      	nop
  }

  return result;
 8000748:	7dfb      	ldrb	r3, [r7, #23]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	f023 0201 	bic.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6a1b      	ldr	r3, [r3, #32]
 800077a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	4313      	orrs	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	f023 0202 	bic.w	r2, r3, #2
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	f023 0201 	bic.w	r2, r3, #1
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <OC1Config+0xf0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d00b      	beq.n	80007de <OC1Config+0x8a>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <OC1Config+0xf4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d007      	beq.n	80007de <OC1Config+0x8a>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <OC1Config+0xf8>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d003      	beq.n	80007de <OC1Config+0x8a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <OC1Config+0xfc>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d11e      	bne.n	800081c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f023 0208 	bic.w	r2, r3, #8
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4313      	orrs	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	f023 0204 	bic.w	r2, r3, #4
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4313      	orrs	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4313      	orrs	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4619      	mov	r1, r3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe69 	bl	8000506 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40014000 	.word	0x40014000
 800084c:	40014400 	.word	0x40014400
 8000850:	40014800 	.word	0x40014800

08000854 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	f023 0210 	bic.w	r2, r3, #16
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800088e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	0212      	lsls	r2, r2, #8
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f023 0220 	bic.w	r2, r3, #32
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f023 0210 	bic.w	r2, r3, #16
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <OC2Config+0xf8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d00b      	beq.n	80008e4 <OC2Config+0x90>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <OC2Config+0xfc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d007      	beq.n	80008e4 <OC2Config+0x90>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <OC2Config+0x100>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d003      	beq.n	80008e4 <OC2Config+0x90>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <OC2Config+0x104>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d11f      	bne.n	8000924 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	019b      	lsls	r3, r3, #6
 80008f0:	4313      	orrs	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	019b      	lsls	r3, r3, #6
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fdf3 	bl	8000522 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40012c00 	.word	0x40012c00
 8000950:	40014000 	.word	0x40014000
 8000954:	40014400 	.word	0x40014400
 8000958:	40014800 	.word	0x40014800

0800095c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	4313      	orrs	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <OC3Config+0xf8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00b      	beq.n	80009ea <OC3Config+0x8e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <OC3Config+0xfc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <OC3Config+0x8e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <OC3Config+0x100>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d003      	beq.n	80009ea <OC3Config+0x8e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <OC3Config+0x104>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d11f      	bne.n	8000a2a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	029b      	lsls	r3, r3, #10
 80009f6:	4313      	orrs	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	4313      	orrs	r3, r2
 8000a08:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	015b      	lsls	r3, r3, #5
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fd7e 	bl	800053e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012c00 	.word	0x40012c00
 8000a58:	40014000 	.word	0x40014000
 8000a5c:	40014400 	.word	0x40014400
 8000a60:	40014800 	.word	0x40014800

08000a64 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a9e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	031b      	lsls	r3, r3, #12
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	031b      	lsls	r3, r3, #12
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <OC4Config+0xc8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00b      	beq.n	8000af4 <OC4Config+0x90>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <OC4Config+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d007      	beq.n	8000af4 <OC4Config+0x90>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <OC4Config+0xd0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d003      	beq.n	8000af4 <OC4Config+0x90>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <OC4Config+0xd4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d107      	bne.n	8000b04 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	4313      	orrs	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4619      	mov	r1, r3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fd1f 	bl	800055a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	40014000 	.word	0x40014000
 8000b34:	40014400 	.word	0x40014400
 8000b38:	40014800 	.word	0x40014800

08000b3c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <OC5Config+0xb4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00b      	beq.n	8000bb8 <OC5Config+0x7c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <OC5Config+0xb8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <OC5Config+0x7c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <OC5Config+0xbc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d003      	beq.n	8000bb8 <OC5Config+0x7c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <OC5Config+0xc0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d109      	bne.n	8000bcc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fccc 	bl	8000576 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00
 8000bf4:	40014000 	.word	0x40014000
 8000bf8:	40014400 	.word	0x40014400
 8000bfc:	40014800 	.word	0x40014800

08000c00 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	0212      	lsls	r2, r2, #8
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	051b      	lsls	r3, r3, #20
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	051b      	lsls	r3, r3, #20
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <OC6Config+0xb4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00b      	beq.n	8000c7e <OC6Config+0x7e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <OC6Config+0xb8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <OC6Config+0x7e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <OC6Config+0xbc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d003      	beq.n	8000c7e <OC6Config+0x7e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <OC6Config+0xc0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d109      	bne.n	8000c92 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	029b      	lsls	r3, r3, #10
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fc77 	bl	8000592 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40014000 	.word	0x40014000
 8000cbc:	40014400 	.word	0x40014400
 8000cc0:	40014800 	.word	0x40014800

08000cc4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <LL_InitTick+0x30>)
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <LL_InitTick+0x30>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <LL_InitTick+0x30>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffdd 	bl	8000cc4 <LL_InitTick>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <LL_mDelay+0x44>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d22:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2a:	d00c      	beq.n	8000d46 <LL_mDelay+0x32>
  {
    Delay++;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d32:	e008      	b.n	8000d46 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <LL_mDelay+0x44>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <LL_mDelay+0x32>
    {
      Delay--;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f3      	bne.n	8000d34 <LL_mDelay+0x20>
    }
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <LL_SetSystemCoreClock+0x1c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000c8 	.word	0x200000c8

08000d7c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f06f 0201 	mvn.w	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	619a      	str	r2, [r3, #24]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <resetSegments>:

extern int vypis[];

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f7ff ffdb 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f7ff ffd5 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e14:	2102      	movs	r1, #2
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <resetSegments+0x58>)
 8000e18:	f7ff ffd1 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <resetSegments+0x58>)
 8000e20:	f7ff ffcd 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e24:	2110      	movs	r1, #16
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <resetSegments+0x58>)
 8000e28:	f7ff ffc9 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f7ff ffc4 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e36:	2102      	movs	r1, #2
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f7ff ffbf 	bl	8000dbe <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e40:	2108      	movs	r1, #8
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f7ff ffba 	bl	8000dbe <LL_GPIO_SetOutputPin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	48000400 	.word	0x48000400

08000e54 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f7ff ffbb 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f7ff ffb5 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e70:	2102      	movs	r1, #2
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <setSegments+0x58>)
 8000e74:	f7ff ffb1 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e78:	2120      	movs	r1, #32
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <setSegments+0x58>)
 8000e7c:	f7ff ffad 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e80:	2110      	movs	r1, #16
 8000e82:	480a      	ldr	r0, [pc, #40]	; (8000eac <setSegments+0x58>)
 8000e84:	f7ff ffa9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f7ff ffa4 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e92:	2102      	movs	r1, #2
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f7ff ff9f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f7ff ff9a 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	48000400 	.word	0x48000400

08000eb0 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f7ff ff8e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	480a      	ldr	r0, [pc, #40]	; (8000eec <resetDigits+0x3c>)
 8000ec2:	f7ff ff8a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f7ff ff85 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f7ff ff7f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f7ff ff7a 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	48000400 	.word	0x48000400

08000ef0 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <setDigits+0x3c>)
 8000ef8:	f7ff ff61 	bl	8000dbe <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000efc:	2110      	movs	r1, #16
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f7ff ff5c 	bl	8000dbe <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f7ff ff56 	bl	8000dbe <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000f12:	2104      	movs	r1, #4
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f7ff ff51 	bl	8000dbe <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f7ff ff4c 	bl	8000dbe <LL_GPIO_SetOutputPin>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	48000400 	.word	0x48000400

08000f30 <setOne>:
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
}

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f34:	2101      	movs	r1, #1
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff ff4e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f7ff ff48 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <setTwo>:

void setTwo(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f54:	2101      	movs	r1, #1
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f7ff ff3e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f7ff ff39 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <setTwo+0x38>)
 8000f6c:	f7ff ff35 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f7ff ff2f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <setTwo+0x38>)
 8000f80:	f7ff ff2b 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48000400 	.word	0x48000400

08000f8c <setThree>:

void setThree(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f90:	2101      	movs	r1, #1
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f7ff ff20 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f7ff ff1b 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <setThree+0x38>)
 8000fa8:	f7ff ff17 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f7ff ff11 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <setThree+0x38>)
 8000fbc:	f7ff ff0d 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <setFour>:

void setFour(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f7ff ff02 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f7ff fefd 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <setFour+0x30>)
 8000fe4:	f7ff fef9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f7ff fef3 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	48000400 	.word	0x48000400

08000ffc <setFive>:

void setFive(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001000:	2108      	movs	r1, #8
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f7ff fee8 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800100a:	2120      	movs	r1, #32
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <setFive+0x38>)
 800100e:	f7ff fee4 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001012:	2110      	movs	r1, #16
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <setFive+0x38>)
 8001016:	f7ff fee0 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f7ff feda 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001026:	2102      	movs	r1, #2
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f7ff fed5 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	48000400 	.word	0x48000400

08001038 <setSix>:

void setSix(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800103c:	2108      	movs	r1, #8
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f7ff feca 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001046:	2120      	movs	r1, #32
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <setSix+0x44>)
 800104a:	f7ff fec6 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800104e:	2110      	movs	r1, #16
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <setSix+0x44>)
 8001052:	f7ff fec2 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f7ff febc 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001062:	2102      	movs	r1, #2
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f7ff feb7 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f7ff feb1 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	48000400 	.word	0x48000400

08001080 <setSeven>:

void setSeven(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001084:	2101      	movs	r1, #1
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f7ff fea6 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f7ff fea0 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800109a:	2102      	movs	r1, #2
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f7ff fe9b 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <setEight>:

void setEight(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80010ac:	2108      	movs	r1, #8
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f7ff fe92 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80010b6:	2120      	movs	r1, #32
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <setEight+0x50>)
 80010ba:	f7ff fe8e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80010be:	2110      	movs	r1, #16
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <setEight+0x50>)
 80010c2:	f7ff fe8a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f7ff fe84 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80010d2:	2102      	movs	r1, #2
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f7ff fe7f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f7ff fe79 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80010e8:	2101      	movs	r1, #1
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f7ff fe74 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400

080010fc <setNine>:

void setNine(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001100:	2101      	movs	r1, #1
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f7ff fe68 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f7ff fe62 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001116:	2102      	movs	r1, #2
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff fe5d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001120:	2110      	movs	r1, #16
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <setNine+0x3c>)
 8001124:	f7ff fe59 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001128:	2108      	movs	r1, #8
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f7ff fe54 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	48000400 	.word	0x48000400

0800113c <setZero>:

void setZero(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001140:	2108      	movs	r1, #8
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f7ff fe48 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800114a:	2120      	movs	r1, #32
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <setZero+0x48>)
 800114e:	f7ff fe44 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f7ff fe3e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800115e:	2102      	movs	r1, #2
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f7ff fe39 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f7ff fe33 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001174:	2101      	movs	r1, #1
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f7ff fe2e 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	48000400 	.word	0x48000400

08001188 <setMedzera>:

void setMedzera(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800118c:	2120      	movs	r1, #32
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <setMedzera+0x10>)
 8001190:	f7ff fe23 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	48000400 	.word	0x48000400

0800119c <setA>:

void setA(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011a0:	2102      	movs	r1, #2
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f7ff fe18 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011aa:	2101      	movs	r1, #1
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f7ff fe13 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff fe0d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80011c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f7ff fe07 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80011cc:	2108      	movs	r1, #8
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f7ff fe02 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011d6:	2110      	movs	r1, #16
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <setA+0x48>)
 80011da:	f7ff fdfe 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	48000400 	.word	0x48000400

080011e8 <setB>:

void setB(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011ec:	2102      	movs	r1, #2
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f7ff fdf2 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011f6:	2101      	movs	r1, #1
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f7ff fded 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f7ff fde7 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800120c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f7ff fde1 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001218:	2120      	movs	r1, #32
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <setB+0x50>)
 800121c:	f7ff fddd 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001220:	2110      	movs	r1, #16
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <setB+0x50>)
 8001224:	f7ff fdd9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001228:	2108      	movs	r1, #8
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f7ff fdd4 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	48000400 	.word	0x48000400

0800123c <setC>:

void setC(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001240:	2102      	movs	r1, #2
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f7ff fdc8 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800124a:	2120      	movs	r1, #32
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <setC+0x30>)
 800124e:	f7ff fdc4 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f7ff fdbe 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800125e:	2108      	movs	r1, #8
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f7ff fdb9 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	48000400 	.word	0x48000400

08001270 <setD>:

void setD(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001274:	2102      	movs	r1, #2
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f7ff fdae 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800127e:	2101      	movs	r1, #1
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f7ff fda9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f7ff fda3 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001294:	2120      	movs	r1, #32
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <setD+0x48>)
 8001298:	f7ff fd9f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800129c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f7ff fd99 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80012a8:	2108      	movs	r1, #8
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f7ff fd94 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	48000400 	.word	0x48000400

080012bc <setE>:

void setE(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012c0:	2102      	movs	r1, #2
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f7ff fd88 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80012ca:	2120      	movs	r1, #32
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <setE+0x38>)
 80012ce:	f7ff fd84 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f7ff fd7e 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80012de:	2108      	movs	r1, #8
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f7ff fd79 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80012e8:	2110      	movs	r1, #16
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <setE+0x38>)
 80012ec:	f7ff fd75 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	48000400 	.word	0x48000400

080012f8 <setF>:

void setF(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012fc:	2102      	movs	r1, #2
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f7ff fd6a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f7ff fd64 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001312:	2108      	movs	r1, #8
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f7ff fd5f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800131c:	2110      	movs	r1, #16
 800131e:	4802      	ldr	r0, [pc, #8]	; (8001328 <setF+0x30>)
 8001320:	f7ff fd5b 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	48000400 	.word	0x48000400

0800132c <setG>:

void setG(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001330:	2102      	movs	r1, #2
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f7ff fd50 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800133a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f7ff fd4a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001346:	2120      	movs	r1, #32
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <setG+0x3c>)
 800134a:	f7ff fd46 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800134e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7ff fd40 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800135a:	2108      	movs	r1, #8
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f7ff fd3b 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400

0800136c <setH>:

void setH(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001370:	2101      	movs	r1, #1
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f7ff fd30 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f7ff fd2a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f7ff fd24 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001392:	2108      	movs	r1, #8
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f7ff fd1f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800139c:	2110      	movs	r1, #16
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <setH+0x3c>)
 80013a0:	f7ff fd1b 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	48000400 	.word	0x48000400

080013ac <setI>:

void setI(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f7ff fd0f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80013bc:	2108      	movs	r1, #8
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f7ff fd0a 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <setJ>:

void setJ(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80013d0:	2101      	movs	r1, #1
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f7ff fd00 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f7ff fcfa 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013e6:	2120      	movs	r1, #32
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <setJ+0x34>)
 80013ea:	f7ff fcf6 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff fcf0 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400

08001404 <setK>:

void setK(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f7ff fce3 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001414:	2108      	movs	r1, #8
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f7ff fcde 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800141e:	2110      	movs	r1, #16
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <setK+0x28>)
 8001422:	f7ff fcda 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	48000400 	.word	0x48000400

08001430 <setL>:

void setL(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001434:	2120      	movs	r1, #32
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <setL+0x28>)
 8001438:	f7ff fccf 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800143c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f7ff fcc9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001448:	2108      	movs	r1, #8
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f7ff fcc4 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400

0800145c <setM>:

void setM(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001460:	2101      	movs	r1, #1
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f7ff fcb8 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800146a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f7ff fcb2 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f7ff fcac 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001482:	2108      	movs	r1, #8
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f7ff fca7 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <setN>:

void setN(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f7ff fc9d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f7ff fc97 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014ac:	2110      	movs	r1, #16
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <setN+0x28>)
 80014b0:	f7ff fc93 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	48000400 	.word	0x48000400

080014bc <setO>:

void setO(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014c0:	2102      	movs	r1, #2
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f7ff fc88 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80014ca:	2101      	movs	r1, #1
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f7ff fc83 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f7ff fc7d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014e0:	2120      	movs	r1, #32
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <setO+0x48>)
 80014e4:	f7ff fc79 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f7ff fc73 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014f4:	2108      	movs	r1, #8
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f7ff fc6e 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	48000400 	.word	0x48000400

08001508 <setP>:

void setP(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800150c:	2102      	movs	r1, #2
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f7ff fc62 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001516:	2101      	movs	r1, #1
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f7ff fc5d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f7ff fc57 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800152c:	2108      	movs	r1, #8
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f7ff fc52 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001536:	2110      	movs	r1, #16
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <setP+0x3c>)
 800153a:	f7ff fc4e 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	48000400 	.word	0x48000400

08001548 <setR>:
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}

void setR(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f7ff fc41 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001558:	2110      	movs	r1, #16
 800155a:	4802      	ldr	r0, [pc, #8]	; (8001564 <setR+0x1c>)
 800155c:	f7ff fc3d 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	48000400 	.word	0x48000400

08001568 <setS>:

void setS(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800156c:	2102      	movs	r1, #2
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f7ff fc32 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f7ff fc2c 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001582:	2120      	movs	r1, #32
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <setS+0x38>)
 8001586:	f7ff fc28 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800158a:	2108      	movs	r1, #8
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f7ff fc23 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001594:	2110      	movs	r1, #16
 8001596:	4802      	ldr	r0, [pc, #8]	; (80015a0 <setS+0x38>)
 8001598:	f7ff fc1f 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	48000400 	.word	0x48000400

080015a4 <setT>:

void setT(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015a8:	2120      	movs	r1, #32
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <setT+0x30>)
 80015ac:	f7ff fc15 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f7ff fc0f 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015bc:	2108      	movs	r1, #8
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f7ff fc0a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015c6:	2110      	movs	r1, #16
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <setT+0x30>)
 80015ca:	f7ff fc06 	bl	8000dda <LL_GPIO_ResetOutputPin>
//	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	48000400 	.word	0x48000400

080015d8 <setU>:

void setU(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015dc:	2101      	movs	r1, #1
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f7ff fbfa 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f7ff fbf4 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015f2:	2120      	movs	r1, #32
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <setU+0x3c>)
 80015f6:	f7ff fbf0 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f7ff fbea 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001606:	2108      	movs	r1, #8
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f7ff fbe5 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	48000400 	.word	0x48000400

08001618 <setV>:

void setV(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800161c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f7ff fbd9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001628:	2120      	movs	r1, #32
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <setV+0x28>)
 800162c:	f7ff fbd5 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f7ff fbcf 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	48000400 	.word	0x48000400

08001644 <setW>:

void setW(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001648:	2102      	movs	r1, #2
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f7ff fbc4 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001652:	2101      	movs	r1, #1
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f7ff fbbf 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f7ff fbb9 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001668:	2120      	movs	r1, #32
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <setW+0x38>)
 800166c:	f7ff fbb5 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001670:	2110      	movs	r1, #16
 8001672:	4802      	ldr	r0, [pc, #8]	; (800167c <setW+0x38>)
 8001674:	f7ff fbb1 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	48000400 	.word	0x48000400

08001680 <setX>:

void setX(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001684:	2101      	movs	r1, #1
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f7ff fba6 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800168e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f7ff fba0 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800169a:	2110      	movs	r1, #16
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <setX+0x28>)
 800169e:	f7ff fb9c 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	48000400 	.word	0x48000400

080016ac <setY>:

void setY(void){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016b0:	2101      	movs	r1, #1
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f7ff fb90 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f7ff fb8a 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016c6:	2120      	movs	r1, #32
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <setY+0x38>)
 80016ca:	f7ff fb86 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016ce:	2108      	movs	r1, #8
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f7ff fb81 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016d8:	2110      	movs	r1, #16
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <setY+0x38>)
 80016dc:	f7ff fb7d 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	48000400 	.word	0x48000400

080016e8 <setZ>:

void setZ(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016ec:	2102      	movs	r1, #2
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f7ff fb72 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016f6:	2101      	movs	r1, #1
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f7ff fb6d 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001700:	2120      	movs	r1, #32
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <setZ+0x38>)
 8001704:	f7ff fb69 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f7ff fb63 	bl	8000dda <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001714:	2110      	movs	r1, #16
 8001716:	4802      	ldr	r0, [pc, #8]	; (8001720 <setZ+0x38>)
 8001718:	f7ff fb5f 	bl	8000dda <LL_GPIO_ResetOutputPin>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	48000400 	.word	0x48000400

08001724 <updateDisplay>:
void updateDisplay(void)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e170      	b.n	8001a12 <updateDisplay+0x2ee>
	{
		switch(vypis[i])
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4abc      	ldr	r2, [pc, #752]	; (8001a24 <updateDisplay+0x300>)
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	2b5f      	cmp	r3, #95	; 0x5f
 800173a:	f200 812f 	bhi.w	800199c <updateDisplay+0x278>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <updateDisplay+0x20>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080018c5 	.word	0x080018c5
 8001748:	080018cb 	.word	0x080018cb
 800174c:	080018d1 	.word	0x080018d1
 8001750:	080018d7 	.word	0x080018d7
 8001754:	080018dd 	.word	0x080018dd
 8001758:	080018e3 	.word	0x080018e3
 800175c:	080018e9 	.word	0x080018e9
 8001760:	080018ef 	.word	0x080018ef
 8001764:	080018f5 	.word	0x080018f5
 8001768:	080018fb 	.word	0x080018fb
 800176c:	0800199d 	.word	0x0800199d
 8001770:	0800199d 	.word	0x0800199d
 8001774:	0800199d 	.word	0x0800199d
 8001778:	0800199d 	.word	0x0800199d
 800177c:	0800199d 	.word	0x0800199d
 8001780:	0800199d 	.word	0x0800199d
 8001784:	0800199d 	.word	0x0800199d
 8001788:	0800199d 	.word	0x0800199d
 800178c:	0800199d 	.word	0x0800199d
 8001790:	0800199d 	.word	0x0800199d
 8001794:	0800199d 	.word	0x0800199d
 8001798:	0800199d 	.word	0x0800199d
 800179c:	0800199d 	.word	0x0800199d
 80017a0:	0800199d 	.word	0x0800199d
 80017a4:	0800199d 	.word	0x0800199d
 80017a8:	0800199d 	.word	0x0800199d
 80017ac:	0800199d 	.word	0x0800199d
 80017b0:	0800199d 	.word	0x0800199d
 80017b4:	0800199d 	.word	0x0800199d
 80017b8:	0800199d 	.word	0x0800199d
 80017bc:	0800199d 	.word	0x0800199d
 80017c0:	0800199d 	.word	0x0800199d
 80017c4:	0800199d 	.word	0x0800199d
 80017c8:	0800199d 	.word	0x0800199d
 80017cc:	0800199d 	.word	0x0800199d
 80017d0:	0800199d 	.word	0x0800199d
 80017d4:	0800199d 	.word	0x0800199d
 80017d8:	0800199d 	.word	0x0800199d
 80017dc:	0800199d 	.word	0x0800199d
 80017e0:	0800199d 	.word	0x0800199d
 80017e4:	0800199d 	.word	0x0800199d
 80017e8:	0800199d 	.word	0x0800199d
 80017ec:	0800199d 	.word	0x0800199d
 80017f0:	0800199d 	.word	0x0800199d
 80017f4:	0800199d 	.word	0x0800199d
 80017f8:	0800199d 	.word	0x0800199d
 80017fc:	0800199d 	.word	0x0800199d
 8001800:	0800199d 	.word	0x0800199d
 8001804:	0800199d 	.word	0x0800199d
 8001808:	0800199d 	.word	0x0800199d
 800180c:	0800199d 	.word	0x0800199d
 8001810:	0800199d 	.word	0x0800199d
 8001814:	0800199d 	.word	0x0800199d
 8001818:	0800199d 	.word	0x0800199d
 800181c:	0800199d 	.word	0x0800199d
 8001820:	0800199d 	.word	0x0800199d
 8001824:	0800199d 	.word	0x0800199d
 8001828:	0800199d 	.word	0x0800199d
 800182c:	0800199d 	.word	0x0800199d
 8001830:	0800199d 	.word	0x0800199d
 8001834:	0800199d 	.word	0x0800199d
 8001838:	0800199d 	.word	0x0800199d
 800183c:	0800199d 	.word	0x0800199d
 8001840:	0800199d 	.word	0x0800199d
 8001844:	0800199d 	.word	0x0800199d
 8001848:	08001907 	.word	0x08001907
 800184c:	0800190d 	.word	0x0800190d
 8001850:	08001913 	.word	0x08001913
 8001854:	08001919 	.word	0x08001919
 8001858:	0800191f 	.word	0x0800191f
 800185c:	08001925 	.word	0x08001925
 8001860:	0800192b 	.word	0x0800192b
 8001864:	08001931 	.word	0x08001931
 8001868:	08001937 	.word	0x08001937
 800186c:	0800193d 	.word	0x0800193d
 8001870:	08001943 	.word	0x08001943
 8001874:	08001949 	.word	0x08001949
 8001878:	0800194f 	.word	0x0800194f
 800187c:	08001955 	.word	0x08001955
 8001880:	0800195b 	.word	0x0800195b
 8001884:	08001961 	.word	0x08001961
 8001888:	0800199d 	.word	0x0800199d
 800188c:	08001967 	.word	0x08001967
 8001890:	0800196d 	.word	0x0800196d
 8001894:	08001973 	.word	0x08001973
 8001898:	08001979 	.word	0x08001979
 800189c:	0800197f 	.word	0x0800197f
 80018a0:	08001985 	.word	0x08001985
 80018a4:	0800198b 	.word	0x0800198b
 80018a8:	08001991 	.word	0x08001991
 80018ac:	08001997 	.word	0x08001997
 80018b0:	0800199d 	.word	0x0800199d
 80018b4:	0800199d 	.word	0x0800199d
 80018b8:	0800199d 	.word	0x0800199d
 80018bc:	0800199d 	.word	0x0800199d
 80018c0:	08001901 	.word	0x08001901
		{
			case 0:setZero();break;
 80018c4:	f7ff fc3a 	bl	800113c <setZero>
 80018c8:	e068      	b.n	800199c <updateDisplay+0x278>
			case 1:setOne();break;
 80018ca:	f7ff fb31 	bl	8000f30 <setOne>
 80018ce:	e065      	b.n	800199c <updateDisplay+0x278>
			case 2:setTwo();break;
 80018d0:	f7ff fb3e 	bl	8000f50 <setTwo>
 80018d4:	e062      	b.n	800199c <updateDisplay+0x278>
			case 3:setThree();break;
 80018d6:	f7ff fb59 	bl	8000f8c <setThree>
 80018da:	e05f      	b.n	800199c <updateDisplay+0x278>
			case 4:setFour();break;
 80018dc:	f7ff fb74 	bl	8000fc8 <setFour>
 80018e0:	e05c      	b.n	800199c <updateDisplay+0x278>
			case 5:setFive();break;
 80018e2:	f7ff fb8b 	bl	8000ffc <setFive>
 80018e6:	e059      	b.n	800199c <updateDisplay+0x278>
			case 6:setSix();break;
 80018e8:	f7ff fba6 	bl	8001038 <setSix>
 80018ec:	e056      	b.n	800199c <updateDisplay+0x278>
			case 7:setSeven();break;
 80018ee:	f7ff fbc7 	bl	8001080 <setSeven>
 80018f2:	e053      	b.n	800199c <updateDisplay+0x278>
			case 8:setEight();break;
 80018f4:	f7ff fbd8 	bl	80010a8 <setEight>
 80018f8:	e050      	b.n	800199c <updateDisplay+0x278>
			case 9:setNine();break;
 80018fa:	f7ff fbff 	bl	80010fc <setNine>
 80018fe:	e04d      	b.n	800199c <updateDisplay+0x278>

			case '_':setMedzera();break;
 8001900:	f7ff fc42 	bl	8001188 <setMedzera>
 8001904:	e04a      	b.n	800199c <updateDisplay+0x278>
			case 'A':setA();break;
 8001906:	f7ff fc49 	bl	800119c <setA>
 800190a:	e047      	b.n	800199c <updateDisplay+0x278>
			case 'B':setB();break;
 800190c:	f7ff fc6c 	bl	80011e8 <setB>
 8001910:	e044      	b.n	800199c <updateDisplay+0x278>
			case 'C':setC();break;
 8001912:	f7ff fc93 	bl	800123c <setC>
 8001916:	e041      	b.n	800199c <updateDisplay+0x278>
			case 'D':setD();break;
 8001918:	f7ff fcaa 	bl	8001270 <setD>
 800191c:	e03e      	b.n	800199c <updateDisplay+0x278>
			case 'E':setE();break;
 800191e:	f7ff fccd 	bl	80012bc <setE>
 8001922:	e03b      	b.n	800199c <updateDisplay+0x278>
			case 'F':setF();break;
 8001924:	f7ff fce8 	bl	80012f8 <setF>
 8001928:	e038      	b.n	800199c <updateDisplay+0x278>
			case 'G':setG();break;
 800192a:	f7ff fcff 	bl	800132c <setG>
 800192e:	e035      	b.n	800199c <updateDisplay+0x278>
			case 'H':setH();break;
 8001930:	f7ff fd1c 	bl	800136c <setH>
 8001934:	e032      	b.n	800199c <updateDisplay+0x278>
			case 'I':setI();break;
 8001936:	f7ff fd39 	bl	80013ac <setI>
 800193a:	e02f      	b.n	800199c <updateDisplay+0x278>
			case 'J':setJ();break;
 800193c:	f7ff fd46 	bl	80013cc <setJ>
 8001940:	e02c      	b.n	800199c <updateDisplay+0x278>
			case 'K':setK();break;
 8001942:	f7ff fd5f 	bl	8001404 <setK>
 8001946:	e029      	b.n	800199c <updateDisplay+0x278>
			case 'L':setL();break;
 8001948:	f7ff fd72 	bl	8001430 <setL>
 800194c:	e026      	b.n	800199c <updateDisplay+0x278>
			case 'M':setM();break;
 800194e:	f7ff fd85 	bl	800145c <setM>
 8001952:	e023      	b.n	800199c <updateDisplay+0x278>
			case 'N':setN();break;
 8001954:	f7ff fd9c 	bl	8001490 <setN>
 8001958:	e020      	b.n	800199c <updateDisplay+0x278>
			case 'O':setO();break;
 800195a:	f7ff fdaf 	bl	80014bc <setO>
 800195e:	e01d      	b.n	800199c <updateDisplay+0x278>
			case 'P':setP();break;
 8001960:	f7ff fdd2 	bl	8001508 <setP>
 8001964:	e01a      	b.n	800199c <updateDisplay+0x278>
			case 'R':setR();break;
 8001966:	f7ff fdef 	bl	8001548 <setR>
 800196a:	e017      	b.n	800199c <updateDisplay+0x278>
			case 'S':setS();break;
 800196c:	f7ff fdfc 	bl	8001568 <setS>
 8001970:	e014      	b.n	800199c <updateDisplay+0x278>
			case 'T':setT();break;
 8001972:	f7ff fe17 	bl	80015a4 <setT>
 8001976:	e011      	b.n	800199c <updateDisplay+0x278>
			case 'U':setU();break;
 8001978:	f7ff fe2e 	bl	80015d8 <setU>
 800197c:	e00e      	b.n	800199c <updateDisplay+0x278>
			case 'V':setV();break;
 800197e:	f7ff fe4b 	bl	8001618 <setV>
 8001982:	e00b      	b.n	800199c <updateDisplay+0x278>
			case 'W':setW();break;
 8001984:	f7ff fe5e 	bl	8001644 <setW>
 8001988:	e008      	b.n	800199c <updateDisplay+0x278>
			case 'X':setX();break;
 800198a:	f7ff fe79 	bl	8001680 <setX>
 800198e:	e005      	b.n	800199c <updateDisplay+0x278>
			case 'Y':setY();break;
 8001990:	f7ff fe8c 	bl	80016ac <setY>
 8001994:	e002      	b.n	800199c <updateDisplay+0x278>
			case 'Z':setZ();break;
 8001996:	f7ff fea7 	bl	80016e8 <setZ>
 800199a:	bf00      	nop
		}

		if(i == 0)DIGIT_1_ON;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <updateDisplay+0x286>
 80019a2:	2101      	movs	r1, #1
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <updateDisplay+0x304>)
 80019a6:	f7ff fa0a 	bl	8000dbe <LL_GPIO_SetOutputPin>
		if(i == 1)DIGIT_2_ON;
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d104      	bne.n	80019ba <updateDisplay+0x296>
 80019b0:	2110      	movs	r1, #16
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f7ff fa02 	bl	8000dbe <LL_GPIO_SetOutputPin>
		if(i == 2)DIGIT_3_ON;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d105      	bne.n	80019cc <updateDisplay+0x2a8>
 80019c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f7ff f9f9 	bl	8000dbe <LL_GPIO_SetOutputPin>
		if(i == 3)DIGIT_4_ON;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d104      	bne.n	80019dc <updateDisplay+0x2b8>
 80019d2:	2104      	movs	r1, #4
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f7ff f9f1 	bl	8000dbe <LL_GPIO_SetOutputPin>

		disp_time_saved = disp_time;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <updateDisplay+0x308>)
 80019de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <updateDisplay+0x30c>)
 80019e4:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 80019e8:	bf00      	nop
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <updateDisplay+0x30c>)
 80019ec:	e9d3 1200 	ldrd	r1, r2, [r3]
 80019f0:	1c8b      	adds	r3, r1, #2
 80019f2:	f142 0400 	adc.w	r4, r2, #0
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <updateDisplay+0x308>)
 80019f8:	e9d2 1200 	ldrd	r1, r2, [r2]
 80019fc:	42a2      	cmp	r2, r4
 80019fe:	bf08      	it	eq
 8001a00:	4299      	cmpeq	r1, r3
 8001a02:	d3f2      	bcc.n	80019ea <updateDisplay+0x2c6>
		resetDigits();
 8001a04:	f7ff fa54 	bl	8000eb0 <resetDigits>
		resetSegments();
 8001a08:	f7ff f9f6 	bl	8000df8 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	f67f ae8b 	bls.w	8001730 <updateDisplay+0xc>
	}


}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000108 	.word	0x20000108
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	200000f0 	.word	0x200000f0
 8001a30:	200000f8 	.word	0x200000f8

08001a34 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <TIM3_IRQHandler+0x20>)
 8001a3a:	f7ff f9ad 	bl	8000d98 <LL_TIM_IsActiveFlag_UPDATE>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001a44:	f7ff fe6e 	bl	8001724 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <TIM3_IRQHandler+0x20>)
 8001a4a:	f7ff f997 	bl	8000d7c <LL_TIM_ClearFlag_UPDATE>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40000400 	.word	0x40000400

08001a58 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000

08001a88 <LL_GPIO_ResetOutputPin>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001aba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001abe:	f7ff ffcb 	bl	8001a58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ac2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ac6:	f7ff ffc7 	bl	8001a58 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001aca:	f640 111b 	movw	r1, #2331	; 0x91b
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f7ff ffd9 	bl	8001a88 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001ad6:	2132      	movs	r1, #50	; 0x32
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_GPIO_Init+0x84>)
 8001ada:	f7ff ffd5 	bl	8001a88 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001ade:	f641 139f 	movw	r3, #6559	; 0x199f
 8001ae2:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	463b      	mov	r3, r7
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f7fe fc5f 	bl	80003be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 8001b00:	2333      	movs	r3, #51	; 0x33
 8001b02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b04:	2301      	movs	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	463b      	mov	r3, r7
 8001b16:	4619      	mov	r1, r3
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_GPIO_Init+0x84>)
 8001b1a:	f7fe fc50 	bl	80003be <LL_GPIO_Init>

}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	48000400 	.word	0x48000400

08001b2c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_RCC_HSI_Enable+0x1c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <LL_RCC_HSI_Enable+0x1c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_RCC_HSI_IsReady+0x20>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4904      	ldr	r1, [pc, #16]	; (8001be0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <LL_RCC_SetSysClkSource+0x24>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 0203 	bic.w	r2, r3, #3
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <LL_RCC_SetSysClkSource+0x24>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000

08001c0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <LL_RCC_GetSysClkSource+0x18>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	4904      	ldr	r1, [pc, #16]	; (8001c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	4904      	ldr	r1, [pc, #16]	; (8001c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000

08001c78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000

08001d00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_FLASH_SetLatency+0x24>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 0207 	bic.w	r2, r3, #7
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <LL_FLASH_SetLatency+0x24>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40022000 	.word	0x40022000

08001d28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <LL_FLASH_GetLatency+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000

08001d44 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d106      	bne.n	8001d60 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LL_SYSTICK_SetClkSource+0x34>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <LL_SYSTICK_SetClkSource+0x34>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001d5e:	e005      	b.n	8001d6c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <LL_SYSTICK_SetClkSource+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <LL_SYSTICK_SetClkSource+0x34>)
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <LL_SYSTICK_EnableIT+0x1c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <LL_SYSTICK_EnableIT+0x1c>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <main>:
int poc = 0;
int smer = 0;
int text[50] = {'L','U','K','A','S','_','K','O','N','C','A','L','_',8,6,1,1,9};

int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ff95 	bl	8001cd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001da6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001daa:	f7ff ff79 	bl	8001ca0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dae:	2003      	movs	r0, #3
 8001db0:	f7ff febc 	bl	8001b2c <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001db4:	f000 f85a 	bl	8001e6c <SystemClock_Config>

  MX_GPIO_Init();
 8001db8:	f7ff fe74 	bl	8001aa4 <MX_GPIO_Init>

  setSegments();
 8001dbc:	f7ff f84a 	bl	8000e54 <setSegments>
  setDigits();
 8001dc0:	f7ff f896 	bl	8000ef0 <setDigits>

  LL_mDelay(2000);
 8001dc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dc8:	f7fe ffa4 	bl	8000d14 <LL_mDelay>

  resetDigits();
 8001dcc:	f7ff f870 	bl	8000eb0 <resetDigits>
  resetSegments();
 8001dd0:	f7ff f812 	bl	8000df8 <resetSegments>

  MX_TIM3_Init();
 8001dd4:	f000 fa62 	bl	800229c <MX_TIM3_Init>


  while (1)
  {

	      vypis[0]=text[poc];
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <main+0xc0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <main+0xc4>)
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <main+0xc8>)
 8001de4:	6013      	str	r3, [r2, #0]
	  	  vypis[1]=text[poc+1];
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <main+0xc0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <main+0xc4>)
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <main+0xc8>)
 8001df4:	6053      	str	r3, [r2, #4]
	  	  vypis[2]=text[poc+2];
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <main+0xc0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <main+0xc4>)
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <main+0xc8>)
 8001e04:	6093      	str	r3, [r2, #8]
	  	  vypis[3]=text[poc+3];
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <main+0xc0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3303      	adds	r3, #3
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <main+0xc4>)
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <main+0xc8>)
 8001e14:	60d3      	str	r3, [r2, #12]

	  	  if(smer==0){poc++;}else{poc--;}
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <main+0xcc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <main+0x8e>
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <main+0xc0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <main+0xc0>)
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e004      	b.n	8001e34 <main+0x98>
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <main+0xc0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <main+0xc0>)
 8001e32:	6013      	str	r3, [r2, #0]

	  	  if(poc==14)smer=1;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <main+0xc0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b0e      	cmp	r3, #14
 8001e3a:	d102      	bne.n	8001e42 <main+0xa6>
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <main+0xcc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
	  	  if(poc==0)smer=0;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <main+0xc0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <main+0xb4>
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <main+0xcc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

	  	  LL_mDelay(500);
 8001e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e54:	f7fe ff5e 	bl	8000d14 <LL_mDelay>
	      vypis[0]=text[poc];
 8001e58:	e7be      	b.n	8001dd8 <main+0x3c>
 8001e5a:	bf00      	nop
 8001e5c:	20000100 	.word	0x20000100
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000108 	.word	0x20000108
 8001e68:	20000104 	.word	0x20000104

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff ff45 	bl	8001d00 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001e76:	f7ff ff57 	bl	8001d28 <LL_FLASH_GetLatency>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001e80:	f000 f82c 	bl	8001edc <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001e84:	f7ff fe76 	bl	8001b74 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001e88:	bf00      	nop
 8001e8a:	f7ff fe83 	bl	8001b94 <LL_RCC_HSI_IsReady>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d1fa      	bne.n	8001e8a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001e94:	2010      	movs	r0, #16
 8001e96:	f7ff fe8f 	bl	8001bb8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fec4 	bl	8001c28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fed5 	bl	8001c50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fee6 	bl	8001c78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fe99 	bl	8001be4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff feaa 	bl	8001c0c <LL_RCC_GetSysClkSource>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1fa      	bne.n	8001eb4 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <SystemClock_Config+0x6c>)
 8001ec0:	f7fe ff1a 	bl	8000cf8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001ec4:	2004      	movs	r0, #4
 8001ec6:	f7ff ff3d 	bl	8001d44 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8001eca:	f7ff ff57 	bl	8001d7c <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8001ece:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <SystemClock_Config+0x6c>)
 8001ed0:	f7fe ff44 	bl	8000d5c <LL_SetSystemCoreClock>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <HardFault_Handler+0x4>

08001efe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <MemManage_Handler+0x4>

08001f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <BusFault_Handler+0x4>

08001f0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <UsageFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b490      	push	{r4, r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SysTick_Handler+0x20>)
 8001f42:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f46:	1c4b      	adds	r3, r1, #1
 8001f48:	f142 0400 	adc.w	r4, r2, #0
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <SysTick_Handler+0x20>)
 8001f4e:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc90      	pop	{r4, r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200000f0 	.word	0x200000f0

08001f60 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <SystemInit+0x84>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <SystemInit+0x84>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <SystemInit+0x88>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <SystemInit+0x88>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <SystemInit+0x88>)
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <SystemInit+0x88>)
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <SystemInit+0x8c>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <SystemInit+0x88>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <SystemInit+0x88>)
 8001f92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <SystemInit+0x88>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <SystemInit+0x88>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <SystemInit+0x88>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <SystemInit+0x88>)
 8001fae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fb2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <SystemInit+0x88>)
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <SystemInit+0x88>)
 8001fba:	f023 030f 	bic.w	r3, r3, #15
 8001fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <SystemInit+0x88>)
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <SystemInit+0x88>)
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <SystemInit+0x90>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <SystemInit+0x88>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SystemInit+0x84>)
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd8:	609a      	str	r2, [r3, #8]
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	f87fc00c 	.word	0xf87fc00c
 8001ff0:	ff00fccc 	.word	0xff00fccc

08001ff4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <NVIC_EnableIRQ+0x30>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da0b      	bge.n	8002070 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <NVIC_SetPriority+0x4c>)
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	3b04      	subs	r3, #4
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206e:	e009      	b.n	8002084 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <NVIC_SetPriority+0x50>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	e000e100 	.word	0xe000e100

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000

08002130 <LL_TIM_EnableCounter>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_TIM_EnableARRPreload>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_TIM_OC_DisableFast>:
{
 8002170:	b4b0      	push	{r4, r5, r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d028      	beq.n	80021d2 <LL_TIM_OC_DisableFast+0x62>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d023      	beq.n	80021ce <LL_TIM_OC_DisableFast+0x5e>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d01e      	beq.n	80021ca <LL_TIM_OC_DisableFast+0x5a>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d019      	beq.n	80021c6 <LL_TIM_OC_DisableFast+0x56>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002198:	d013      	beq.n	80021c2 <LL_TIM_OC_DisableFast+0x52>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a0:	d00d      	beq.n	80021be <LL_TIM_OC_DisableFast+0x4e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	d007      	beq.n	80021ba <LL_TIM_OC_DisableFast+0x4a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b0:	d101      	bne.n	80021b6 <LL_TIM_OC_DisableFast+0x46>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e00e      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021b6:	2308      	movs	r3, #8
 80021b8:	e00c      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_TIM_OC_DisableFast+0x64>
 80021d2:	2300      	movs	r3, #0
 80021d4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3318      	adds	r3, #24
 80021da:	461a      	mov	r2, r3
 80021dc:	4629      	mov	r1, r5
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <LL_TIM_OC_DisableFast+0x94>)
 80021e0:	5c5b      	ldrb	r3, [r3, r1]
 80021e2:	4413      	add	r3, r2
 80021e4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	4629      	mov	r1, r5
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <LL_TIM_OC_DisableFast+0x98>)
 80021ec:	5c5b      	ldrb	r3, [r3, r1]
 80021ee:	4619      	mov	r1, r3
 80021f0:	2304      	movs	r3, #4
 80021f2:	408b      	lsls	r3, r1
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4013      	ands	r3, r2
 80021f8:	6023      	str	r3, [r4, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bcb0      	pop	{r4, r5, r7}
 8002202:	4770      	bx	lr
 8002204:	08002424 	.word	0x08002424
 8002208:	08002430 	.word	0x08002430

0800220c <LL_TIM_SetClockSource>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800221e:	f023 0307 	bic.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_TIM_SetTriggerOutput>:
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	605a      	str	r2, [r3, #4]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_TIM_DisableMasterSlaveMode>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_TIM_EnableIT_UPDATE>:
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2220      	movs	r2, #32
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f89f 	bl	80023fc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80022be:	2002      	movs	r0, #2
 80022c0:	f7ff ff1e 	bl	8002100 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80022c4:	f7ff fe96 	bl	8001ff4 <NVIC_GetPriorityGrouping>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2202      	movs	r2, #2
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fee2 	bl	8002098 <NVIC_EncodePriority>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	201d      	movs	r0, #29
 80022da:	f7ff feb3 	bl	8002044 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80022de:	201d      	movs	r0, #29
 80022e0:	f7ff fe96 	bl	8002010 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80022e4:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80022e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 80022ee:	2313      	movs	r3, #19
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	4817      	ldr	r0, [pc, #92]	; (800235c <MX_TIM3_Init+0xc0>)
 80022fe:	f7fe f967 	bl	80005d0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8002302:	4816      	ldr	r0, [pc, #88]	; (800235c <MX_TIM3_Init+0xc0>)
 8002304:	f7ff ff24 	bl	8002150 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002308:	2100      	movs	r1, #0
 800230a:	4814      	ldr	r0, [pc, #80]	; (800235c <MX_TIM3_Init+0xc0>)
 800230c:	f7ff ff7e 	bl	800220c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002310:	2310      	movs	r3, #16
 8002312:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	461a      	mov	r2, r3
 8002328:	2101      	movs	r1, #1
 800232a:	480c      	ldr	r0, [pc, #48]	; (800235c <MX_TIM3_Init+0xc0>)
 800232c:	f7fe f9c4 	bl	80006b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002330:	2101      	movs	r1, #1
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <MX_TIM3_Init+0xc0>)
 8002334:	f7ff ff1c 	bl	8002170 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002338:	2100      	movs	r1, #0
 800233a:	4808      	ldr	r0, [pc, #32]	; (800235c <MX_TIM3_Init+0xc0>)
 800233c:	f7ff ff7b 	bl	8002236 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <MX_TIM3_Init+0xc0>)
 8002342:	f7ff ff8b 	bl	800225c <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_TIM3_Init+0xc0>)
 8002348:	f7ff ff98 	bl	800227c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_TIM3_Init+0xc0>)
 800234e:	f7ff feef 	bl	8002130 <LL_TIM_EnableCounter>

}
 8002352:	bf00      	nop
 8002354:	3738      	adds	r7, #56	; 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40000400 	.word	0x40000400

08002360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002364:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002366:	e003      	b.n	8002370 <LoopCopyDataInit>

08002368 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800236a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800236c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800236e:	3104      	adds	r1, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002374:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002376:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002378:	d3f6      	bcc.n	8002368 <CopyDataInit>
	ldr	r2, =_sbss
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800237c:	e002      	b.n	8002384 <LoopFillZerobss>

0800237e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800237e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002380:	f842 3b04 	str.w	r3, [r2], #4

08002384 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LoopForever+0x16>)
	cmp	r2, r3
 8002386:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002388:	d3f9      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800238a:	f7ff fde9 	bl	8001f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238e:	f000 f811 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002392:	f7ff fd03 	bl	8001d9c <main>

08002396 <LoopForever>:

LoopForever:
    b LoopForever
 8002396:	e7fe      	b.n	8002396 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002398:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800239c:	08002444 	.word	0x08002444
	ldr	r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023a4:	200000cc 	.word	0x200000cc
	ldr	r2, =_sbss
 80023a8:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 80023ac:	20000120 	.word	0x20000120

080023b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC1_2_IRQHandler>
	...

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4e0d      	ldr	r6, [pc, #52]	; (80023ec <__libc_init_array+0x38>)
 80023b8:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023ba:	1ba4      	subs	r4, r4, r6
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	2500      	movs	r5, #0
 80023c0:	42a5      	cmp	r5, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	4e0b      	ldr	r6, [pc, #44]	; (80023f4 <__libc_init_array+0x40>)
 80023c6:	4c0c      	ldr	r4, [pc, #48]	; (80023f8 <__libc_init_array+0x44>)
 80023c8:	f000 f820 	bl	800240c <_init>
 80023cc:	1ba4      	subs	r4, r4, r6
 80023ce:	10a4      	asrs	r4, r4, #2
 80023d0:	2500      	movs	r5, #0
 80023d2:	42a5      	cmp	r5, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023dc:	4798      	blx	r3
 80023de:	3501      	adds	r5, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e6:	4798      	blx	r3
 80023e8:	3501      	adds	r5, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	0800243c 	.word	0x0800243c
 80023f0:	0800243c 	.word	0x0800243c
 80023f4:	0800243c 	.word	0x0800243c
 80023f8:	08002440 	.word	0x08002440

080023fc <memset>:
 80023fc:	4402      	add	r2, r0
 80023fe:	4603      	mov	r3, r0
 8002400:	4293      	cmp	r3, r2
 8002402:	d100      	bne.n	8002406 <memset+0xa>
 8002404:	4770      	bx	lr
 8002406:	f803 1b01 	strb.w	r1, [r3], #1
 800240a:	e7f9      	b.n	8002400 <memset+0x4>

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
