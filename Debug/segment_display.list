
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000008  08002bfc  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08002bfc  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006635  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013a7  00000000  00000000  00026669  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00027a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  00028168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160b3  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c67  00000000  00000000  0003e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000761f1  00000000  00000000  00043532  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  000b97a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bc0 	.word	0x08002bc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002bc0 	.word	0x08002bc0

080001c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4904      	ldr	r1, [pc, #16]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	600b      	str	r3, [r1, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	40010400 	.word	0x40010400

080001ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001f6:	6a1a      	ldr	r2, [r3, #32]
 80001f8:	4904      	ldr	r1, [pc, #16]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	620b      	str	r3, [r1, #32]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	40010400 	.word	0x40010400

08000210 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	43db      	mvns	r3, r3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 8000222:	4013      	ands	r3, r2
 8000224:	600b      	str	r3, [r1, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40010400 	.word	0x40010400

08000238 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 8000242:	6a1a      	ldr	r2, [r3, #32]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	43db      	mvns	r3, r3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 800024a:	4013      	ands	r3, r2
 800024c:	620b      	str	r3, [r1, #32]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40010400 	.word	0x40010400

08000260 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4904      	ldr	r1, [pc, #16]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4313      	orrs	r3, r2
 8000272:	604b      	str	r3, [r1, #4]

}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40010400 	.word	0x40010400

08000284 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800028e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40010400 	.word	0x40010400

080002a8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	43db      	mvns	r3, r3
 80002b8:	4904      	ldr	r1, [pc, #16]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002ba:	4013      	ands	r3, r2
 80002bc:	604b      	str	r3, [r1, #4]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400

080002d0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	43db      	mvns	r3, r3
 80002e0:	4904      	ldr	r1, [pc, #16]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002e2:	4013      	ands	r3, r2
 80002e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40010400 	.word	0x40010400

080002f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	4904      	ldr	r1, [pc, #16]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	608b      	str	r3, [r1, #8]

}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40010400 	.word	0x40010400

0800031c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40010400 	.word	0x40010400

08000340 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	43db      	mvns	r3, r3
 8000350:	4904      	ldr	r1, [pc, #16]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000352:	4013      	ands	r3, r2
 8000354:	608b      	str	r3, [r1, #8]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400

08000368 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	43db      	mvns	r3, r3
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800037a:	4013      	ands	r3, r2
 800037c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40010400 	.word	0x40010400

08000390 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60cb      	str	r3, [r1, #12]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40010400 	.word	0x40010400

080003b4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003c0:	4904      	ldr	r1, [pc, #16]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40010400 	.word	0x40010400

080003d8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4904      	ldr	r1, [pc, #16]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	60cb      	str	r3, [r1, #12]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400

08000400 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800040a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	43db      	mvns	r3, r3
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000412:	4013      	ands	r3, r2
 8000414:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400

08000428 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7a1b      	ldrb	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	f000 80c2 	beq.w	80005c2 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d05b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a5b      	ldrb	r3, [r3, #9]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d00e      	beq.n	800046c <LL_EXTI_Init+0x44>
 800044e:	2b02      	cmp	r3, #2
 8000450:	d017      	beq.n	8000482 <LL_EXTI_Init+0x5a>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d120      	bne.n	8000498 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff24 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feaf 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          break;
 800046a:	e018      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fecd 	bl	8000210 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fef0 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000480:	e00d      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe9e 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fee5 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000496:	e002      	b.n	800049e <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
          break;
 800049c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a9b      	ldrb	r3, [r3, #10]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d02b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7a9b      	ldrb	r3, [r3, #10]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00e      	beq.n	80004cc <LL_EXTI_Init+0xa4>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d017      	beq.n	80004e2 <LL_EXTI_Init+0xba>
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d120      	bne.n	80004f8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff8c 	bl	80003d8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff17 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80004ca:	e019      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff35 	bl	8000340 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004e0:	e00e      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff06 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff4d 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004f6:	e003      	b.n	8000500 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
            break;
 80004fc:	e000      	b.n	8000500 <LL_EXTI_Init+0xd8>
        }
      }
 80004fe:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d071      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7a5b      	ldrb	r3, [r3, #9]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00e      	beq.n	800052e <LL_EXTI_Init+0x106>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d017      	beq.n	8000544 <LL_EXTI_Init+0x11c>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d120      	bne.n	800055a <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fed7 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe60 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          break;
 800052c:	e018      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe80 	bl	8000238 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fea1 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000542:	e00d      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe4f 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe96 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000558:	e002      	b.n	8000560 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
          break;
 800055e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a9b      	ldrb	r3, [r3, #10]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d041      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7a9b      	ldrb	r3, [r3, #10]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d00e      	beq.n	800058e <LL_EXTI_Init+0x166>
 8000570:	2b03      	cmp	r3, #3
 8000572:	d017      	beq.n	80005a4 <LL_EXTI_Init+0x17c>
 8000574:	2b01      	cmp	r3, #1
 8000576:	d120      	bne.n	80005ba <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff3f 	bl	8000400 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fec8 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800058c:	e02f      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fee8 	bl	8000368 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff09 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005a2:	e024      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff feb7 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fefe 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005b8:	e019      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
            break;
 80005be:	bf00      	nop
 80005c0:	e015      	b.n	80005ee <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe22 	bl	8000210 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe69 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe2c 	bl	8000238 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe73 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
 80005ea:	e000      	b.n	80005ee <LL_EXTI_Init+0x1c6>
      }
 80005ec:	bf00      	nop
#endif
  }
  return status;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa93 f3a3 	rbit	r3, r3
 8000612:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	401a      	ands	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	61bb      	str	r3, [r7, #24]
  return(result);
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	3724      	adds	r7, #36	; 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000652:	b480      	push	{r7}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	fb01 f303 	mul.w	r3, r1, r3
 8000670:	431a      	orrs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000682:	b480      	push	{r7}
 8000684:	b089      	sub	sp, #36	; 0x24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa93 f3a3 	rbit	r3, r3
 800069c:	613b      	str	r3, [r7, #16]
  return(result);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	2103      	movs	r1, #3
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	401a      	ands	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fab3 f383 	clz	r3, r3
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	431a      	orrs	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa93 f3a3 	rbit	r3, r3
 80006f6:	613b      	str	r3, [r7, #16]
  return(result);
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	401a      	ands	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	fa93 f3a3 	rbit	r3, r3
 8000714:	61bb      	str	r3, [r7, #24]
  return(result);
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000736:	b480      	push	{r7}
 8000738:	b089      	sub	sp, #36	; 0x24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return(result);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	401a      	ands	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	fa93 f3a3 	rbit	r3, r3
 800076e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fab3 f383 	clz	r3, r3
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa93 f3a3 	rbit	r3, r3
 80007ac:	613b      	str	r3, [r7, #16]
  return(result);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	401a      	ands	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa93 f3a3 	rbit	r3, r3
 80007cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	431a      	orrs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80007e2:	bf00      	nop
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	613b      	str	r3, [r7, #16]
  return(result);
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	fab3 f383 	clz	r3, r3
 8000814:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000816:	e048      	b.n	80008aa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d03a      	beq.n	80008a4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fede 	bl	80005f8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d003      	beq.n	800084c <LL_GPIO_Init+0x5e>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d106      	bne.n	800085a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	69b9      	ldr	r1, [r7, #24]
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff14 	bl	8000682 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	461a      	mov	r2, r3
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff3a 	bl	80006dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d119      	bne.n	80008a4 <LL_GPIO_Init+0xb6>
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	fa93 f3a3 	rbit	r3, r3
 800087a:	60bb      	str	r3, [r7, #8]
  return(result);
 800087c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800087e:	fab3 f383 	clz	r3, r3
 8000882:	2b07      	cmp	r3, #7
 8000884:	d807      	bhi.n	8000896 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	461a      	mov	r2, r3
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff51 	bl	8000736 <LL_GPIO_SetAFPin_0_7>
 8000894:	e006      	b.n	80008a4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	461a      	mov	r2, r3
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff76 	bl	8000790 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa22 f303 	lsr.w	r3, r2, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1af      	bne.n	8000818 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d003      	beq.n	80008c8 <LL_GPIO_Init+0xda>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d107      	bne.n	80008d8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	461a      	mov	r2, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff febd 	bl	8000652 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	615a      	str	r2, [r3, #20]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <LL_TIM_Init+0xd4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <LL_TIM_Init+0x2c>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a22:	d003      	beq.n	8000a2c <LL_TIM_Init+0x2c>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <LL_TIM_Init+0xd8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <LL_TIM_Init+0xd4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <LL_TIM_Init+0x6a>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a48:	d00f      	beq.n	8000a6a <LL_TIM_Init+0x6a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <LL_TIM_Init+0xd8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00b      	beq.n	8000a6a <LL_TIM_Init+0x6a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <LL_TIM_Init+0xdc>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <LL_TIM_Init+0x6a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <LL_TIM_Init+0xe0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d003      	beq.n	8000a6a <LL_TIM_Init+0x6a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <LL_TIM_Init+0xe4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	4619      	mov	r1, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff3a 	bl	80008fe <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff26 	bl	80008e2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LL_TIM_Init+0xd4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d00b      	beq.n	8000ab6 <LL_TIM_Init+0xb6>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LL_TIM_Init+0xdc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d007      	beq.n	8000ab6 <LL_TIM_Init+0xb6>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LL_TIM_Init+0xe0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <LL_TIM_Init+0xb6>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <LL_TIM_Init+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d105      	bne.n	8000ac2 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	7c1b      	ldrb	r3, [r3, #16]
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff2c 	bl	800091a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff8b 	bl	80009de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	40014000 	.word	0x40014000
 8000ae0:	40014400 	.word	0x40014400
 8000ae4:	40014800 	.word	0x40014800

08000ae8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000afe:	d01f      	beq.n	8000b40 <LL_TIM_OC_Init+0x58>
 8000b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b04:	d804      	bhi.n	8000b10 <LL_TIM_OC_Init+0x28>
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d00c      	beq.n	8000b24 <LL_TIM_OC_Init+0x3c>
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d011      	beq.n	8000b32 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000b0e:	e033      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8000b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b14:	d022      	beq.n	8000b5c <LL_TIM_OC_Init+0x74>
 8000b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b1a:	d026      	beq.n	8000b6a <LL_TIM_OC_Init+0x82>
 8000b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b20:	d015      	beq.n	8000b4e <LL_TIM_OC_Init+0x66>
      break;
 8000b22:	e029      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f000 f82c 	bl	8000b84 <OC1Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8000b30:	e022      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f8a5 	bl	8000c84 <OC2Config>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8000b3e:	e01b      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f922 	bl	8000d8c <OC3Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8000b4c:	e014      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f99f 	bl	8000e94 <OC4Config>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
      break;
 8000b5a:	e00d      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 fa04 	bl	8000f6c <OC5Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	75fb      	strb	r3, [r7, #23]
      break;
 8000b68:	e006      	b.n	8000b78 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 fa5f 	bl	8001030 <OC6Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	75fb      	strb	r3, [r7, #23]
      break;
 8000b76:	bf00      	nop
  }

  return result;
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	f023 0201 	bic.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f023 0303 	bic.w	r3, r3, #3
 8000bbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f023 0202 	bic.w	r2, r3, #2
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f023 0201 	bic.w	r2, r3, #1
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <OC1Config+0xf0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00b      	beq.n	8000c0e <OC1Config+0x8a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <OC1Config+0xf4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d007      	beq.n	8000c0e <OC1Config+0x8a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <OC1Config+0xf8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d003      	beq.n	8000c0e <OC1Config+0x8a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <OC1Config+0xfc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11e      	bne.n	8000c4c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f023 0208 	bic.w	r2, r3, #8
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f023 0204 	bic.w	r2, r3, #4
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fe69 	bl	8000936 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012c00 	.word	0x40012c00
 8000c78:	40014000 	.word	0x40014000
 8000c7c:	40014400 	.word	0x40014400
 8000c80:	40014800 	.word	0x40014800

08000c84 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	f023 0210 	bic.w	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a1b      	ldr	r3, [r3, #32]
 8000caa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	0212      	lsls	r2, r2, #8
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f023 0220 	bic.w	r2, r3, #32
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f023 0210 	bic.w	r2, r3, #16
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <OC2Config+0xf8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00b      	beq.n	8000d14 <OC2Config+0x90>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <OC2Config+0xfc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d007      	beq.n	8000d14 <OC2Config+0x90>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <OC2Config+0x100>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d003      	beq.n	8000d14 <OC2Config+0x90>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <OC2Config+0x104>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d11f      	bne.n	8000d54 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	019b      	lsls	r3, r3, #6
 8000d20:	4313      	orrs	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	019b      	lsls	r3, r3, #6
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fdf3 	bl	8000952 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40014000 	.word	0x40014000
 8000d84:	40014400 	.word	0x40014400
 8000d88:	40014800 	.word	0x40014800

08000d8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	4313      	orrs	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <OC3Config+0xf8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00b      	beq.n	8000e1a <OC3Config+0x8e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <OC3Config+0xfc>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <OC3Config+0x8e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <OC3Config+0x100>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d003      	beq.n	8000e1a <OC3Config+0x8e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <OC3Config+0x104>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11f      	bne.n	8000e5a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4313      	orrs	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fd7e 	bl	800096e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40014000 	.word	0x40014000
 8000e8c:	40014400 	.word	0x40014400
 8000e90:	40014800 	.word	0x40014800

08000e94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ece:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	0212      	lsls	r2, r2, #8
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	031b      	lsls	r3, r3, #12
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <OC4Config+0xc8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00b      	beq.n	8000f24 <OC4Config+0x90>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <OC4Config+0xcc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <OC4Config+0x90>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <OC4Config+0xd0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d003      	beq.n	8000f24 <OC4Config+0x90>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <OC4Config+0xd4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d107      	bne.n	8000f34 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fd1f 	bl	800098a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40014000 	.word	0x40014000
 8000f64:	40014400 	.word	0x40014400
 8000f68:	40014800 	.word	0x40014800

08000f6c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <OC5Config+0xb4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00b      	beq.n	8000fe8 <OC5Config+0x7c>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <OC5Config+0xb8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <OC5Config+0x7c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <OC5Config+0xbc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <OC5Config+0x7c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <OC5Config+0xc0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d109      	bne.n	8000ffc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fccc 	bl	80009a6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	40014000 	.word	0x40014000
 8001028:	40014400 	.word	0x40014400
 800102c:	40014800 	.word	0x40014800

08001030 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	0212      	lsls	r2, r2, #8
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	051b      	lsls	r3, r3, #20
 800107a:	4313      	orrs	r3, r2
 800107c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	051b      	lsls	r3, r3, #20
 800108a:	4313      	orrs	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <OC6Config+0xb4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00b      	beq.n	80010ae <OC6Config+0x7e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <OC6Config+0xb8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <OC6Config+0x7e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <OC6Config+0xbc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d003      	beq.n	80010ae <OC6Config+0x7e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <OC6Config+0xc0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d109      	bne.n	80010c2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fc77 	bl	80009c2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40014000 	.word	0x40014000
 80010ec:	40014400 	.word	0x40014400
 80010f0:	40014800 	.word	0x40014800

080010f4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <LL_InitTick+0x30>)
 8001108:	3b01      	subs	r3, #1
 800110a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <LL_InitTick+0x30>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <LL_InitTick+0x30>)
 8001114:	2205      	movs	r2, #5
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e010 	.word	0xe000e010

08001128 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffdd 	bl	80010f4 <LL_InitTick>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <LL_mDelay+0x44>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001152:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115a:	d00c      	beq.n	8001176 <LL_mDelay+0x32>
  {
    Delay++;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001162:	e008      	b.n	8001176 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <LL_mDelay+0x44>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <LL_mDelay+0x32>
    {
      Delay--;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f3      	bne.n	8001164 <LL_mDelay+0x20>
    }
  }
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e010 	.word	0xe000e010

0800118c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <LL_SetSystemCoreClock+0x1c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000

080011ac <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f06f 0201 	mvn.w	r2, #1
 80011ba:	611a      	str	r2, [r3, #16]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <resetSegments>:

extern int vypis[];

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800122c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f7ff ffdb 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f7ff ffd5 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001244:	2102      	movs	r1, #2
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <resetSegments+0x58>)
 8001248:	f7ff ffd1 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800124c:	2120      	movs	r1, #32
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <resetSegments+0x58>)
 8001250:	f7ff ffcd 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001254:	2110      	movs	r1, #16
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <resetSegments+0x58>)
 8001258:	f7ff ffc9 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800125c:	2101      	movs	r1, #1
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7ff ffc4 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001266:	2102      	movs	r1, #2
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f7ff ffbf 	bl	80011ee <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001270:	2108      	movs	r1, #8
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f7ff ffba 	bl	80011ee <LL_GPIO_SetOutputPin>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	48000400 	.word	0x48000400

08001284 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f7ff ffbb 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f7ff ffb5 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80012a0:	2102      	movs	r1, #2
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <setSegments+0x58>)
 80012a4:	f7ff ffb1 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80012a8:	2120      	movs	r1, #32
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <setSegments+0x58>)
 80012ac:	f7ff ffad 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80012b0:	2110      	movs	r1, #16
 80012b2:	480a      	ldr	r0, [pc, #40]	; (80012dc <setSegments+0x58>)
 80012b4:	f7ff ffa9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80012b8:	2101      	movs	r1, #1
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f7ff ffa4 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80012c2:	2102      	movs	r1, #2
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f7ff ff9f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80012cc:	2108      	movs	r1, #8
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f7ff ff9a 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	48000400 	.word	0x48000400

080012e0 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80012e4:	2104      	movs	r1, #4
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f7ff ff8e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80012ee:	2101      	movs	r1, #1
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <resetDigits+0x3c>)
 80012f2:	f7ff ff8a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80012f6:	2110      	movs	r1, #16
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f7ff ff85 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8001300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f7ff ff7f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f7ff ff7a 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	48000400 	.word	0x48000400

08001320 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001324:	2101      	movs	r1, #1
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <setDigits+0x3c>)
 8001328:	f7ff ff61 	bl	80011ee <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 800132c:	2110      	movs	r1, #16
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f7ff ff5c 	bl	80011ee <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f7ff ff56 	bl	80011ee <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001342:	2104      	movs	r1, #4
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f7ff ff51 	bl	80011ee <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f7ff ff4c 	bl	80011ee <LL_GPIO_SetOutputPin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	48000400 	.word	0x48000400

08001360 <setOne>:
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
}

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001364:	2101      	movs	r1, #1
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f7ff ff4e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f7ff ff48 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <setTwo>:

void setTwo(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001384:	2101      	movs	r1, #1
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f7ff ff3e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800138e:	2102      	movs	r1, #2
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f7ff ff39 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001398:	2110      	movs	r1, #16
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <setTwo+0x38>)
 800139c:	f7ff ff35 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a8:	f7ff ff2f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013ac:	2120      	movs	r1, #32
 80013ae:	4802      	ldr	r0, [pc, #8]	; (80013b8 <setTwo+0x38>)
 80013b0:	f7ff ff2b 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	48000400 	.word	0x48000400

080013bc <setThree>:

void setThree(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80013c0:	2101      	movs	r1, #1
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f7ff ff20 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80013ca:	2102      	movs	r1, #2
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f7ff ff1b 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80013d4:	2110      	movs	r1, #16
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <setThree+0x38>)
 80013d8:	f7ff ff17 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f7ff ff11 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013e8:	2120      	movs	r1, #32
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <setThree+0x38>)
 80013ec:	f7ff ff0d 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	48000400 	.word	0x48000400

080013f8 <setFour>:

void setFour(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80013fc:	2108      	movs	r1, #8
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f7ff ff02 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001406:	2101      	movs	r1, #1
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f7ff fefd 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001410:	2110      	movs	r1, #16
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <setFour+0x30>)
 8001414:	f7ff fef9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f7ff fef3 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	48000400 	.word	0x48000400

0800142c <setFive>:

void setFive(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001430:	2108      	movs	r1, #8
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f7ff fee8 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800143a:	2120      	movs	r1, #32
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <setFive+0x38>)
 800143e:	f7ff fee4 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001442:	2110      	movs	r1, #16
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <setFive+0x38>)
 8001446:	f7ff fee0 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800144a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f7ff feda 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001456:	2102      	movs	r1, #2
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f7ff fed5 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	48000400 	.word	0x48000400

08001468 <setSix>:

void setSix(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800146c:	2108      	movs	r1, #8
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f7ff feca 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001476:	2120      	movs	r1, #32
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <setSix+0x44>)
 800147a:	f7ff fec6 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800147e:	2110      	movs	r1, #16
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <setSix+0x44>)
 8001482:	f7ff fec2 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f7ff febc 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001492:	2102      	movs	r1, #2
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f7ff feb7 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f7ff feb1 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	48000400 	.word	0x48000400

080014b0 <setSeven>:

void setSeven(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80014b4:	2101      	movs	r1, #1
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f7ff fea6 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f7ff fea0 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014ca:	2102      	movs	r1, #2
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f7ff fe9b 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <setEight>:

void setEight(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014dc:	2108      	movs	r1, #8
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f7ff fe92 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014e6:	2120      	movs	r1, #32
 80014e8:	480f      	ldr	r0, [pc, #60]	; (8001528 <setEight+0x50>)
 80014ea:	f7ff fe8e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014ee:	2110      	movs	r1, #16
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <setEight+0x50>)
 80014f2:	f7ff fe8a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f7ff fe84 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001502:	2102      	movs	r1, #2
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f7ff fe7f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800150c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f7ff fe79 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001518:	2101      	movs	r1, #1
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f7ff fe74 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	48000400 	.word	0x48000400

0800152c <setNine>:

void setNine(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001530:	2101      	movs	r1, #1
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f7ff fe68 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800153a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f7ff fe62 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001546:	2102      	movs	r1, #2
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f7ff fe5d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001550:	2110      	movs	r1, #16
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <setNine+0x3c>)
 8001554:	f7ff fe59 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001558:	2108      	movs	r1, #8
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff fe54 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	48000400 	.word	0x48000400

0800156c <setZero>:

void setZero(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001570:	2108      	movs	r1, #8
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f7ff fe48 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800157a:	2120      	movs	r1, #32
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <setZero+0x48>)
 800157e:	f7ff fe44 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f7ff fe3e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800158e:	2102      	movs	r1, #2
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f7ff fe39 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f7ff fe33 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015a4:	2101      	movs	r1, #1
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f7ff fe2e 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	48000400 	.word	0x48000400

080015b8 <setMedzera>:

void setMedzera(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015bc:	2120      	movs	r1, #32
 80015be:	4802      	ldr	r0, [pc, #8]	; (80015c8 <setMedzera+0x10>)
 80015c0:	f7ff fe23 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	48000400 	.word	0x48000400

080015cc <setA>:

void setA(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015d0:	2102      	movs	r1, #2
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f7ff fe18 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015da:	2101      	movs	r1, #1
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f7ff fe13 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f7ff fe0d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f7ff fe07 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015fc:	2108      	movs	r1, #8
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f7ff fe02 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001606:	2110      	movs	r1, #16
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <setA+0x48>)
 800160a:	f7ff fdfe 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	48000400 	.word	0x48000400

08001618 <setB>:

void setB(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800161c:	2102      	movs	r1, #2
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f7ff fdf2 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001626:	2101      	movs	r1, #1
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f7ff fded 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f7ff fde7 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800163c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f7ff fde1 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001648:	2120      	movs	r1, #32
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <setB+0x50>)
 800164c:	f7ff fddd 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001650:	2110      	movs	r1, #16
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <setB+0x50>)
 8001654:	f7ff fdd9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001658:	2108      	movs	r1, #8
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f7ff fdd4 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	48000400 	.word	0x48000400

0800166c <setC>:

void setC(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001670:	2102      	movs	r1, #2
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f7ff fdc8 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800167a:	2120      	movs	r1, #32
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <setC+0x30>)
 800167e:	f7ff fdc4 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f7ff fdbe 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800168e:	2108      	movs	r1, #8
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f7ff fdb9 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	48000400 	.word	0x48000400

080016a0 <setD>:

void setD(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016a4:	2102      	movs	r1, #2
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f7ff fdae 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016ae:	2101      	movs	r1, #1
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f7ff fda9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f7ff fda3 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016c4:	2120      	movs	r1, #32
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <setD+0x48>)
 80016c8:	f7ff fd9f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f7ff fd99 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016d8:	2108      	movs	r1, #8
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f7ff fd94 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	48000400 	.word	0x48000400

080016ec <setE>:

void setE(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016f0:	2102      	movs	r1, #2
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f7ff fd88 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016fa:	2120      	movs	r1, #32
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <setE+0x38>)
 80016fe:	f7ff fd84 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f7ff fd7e 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800170e:	2108      	movs	r1, #8
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f7ff fd79 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001718:	2110      	movs	r1, #16
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <setE+0x38>)
 800171c:	f7ff fd75 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	48000400 	.word	0x48000400

08001728 <setF>:

void setF(void){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800172c:	2102      	movs	r1, #2
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f7ff fd6a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f7ff fd64 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001742:	2108      	movs	r1, #8
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f7ff fd5f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800174c:	2110      	movs	r1, #16
 800174e:	4802      	ldr	r0, [pc, #8]	; (8001758 <setF+0x30>)
 8001750:	f7ff fd5b 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	48000400 	.word	0x48000400

0800175c <setG>:

void setG(void){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001760:	2102      	movs	r1, #2
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7ff fd50 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f7ff fd4a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001776:	2120      	movs	r1, #32
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <setG+0x3c>)
 800177a:	f7ff fd46 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800177e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f7ff fd40 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800178a:	2108      	movs	r1, #8
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f7ff fd3b 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	48000400 	.word	0x48000400

0800179c <setH>:

void setH(void){
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80017a0:	2101      	movs	r1, #1
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f7ff fd30 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80017aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f7ff fd2a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f7ff fd24 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017c2:	2108      	movs	r1, #8
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f7ff fd1f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80017cc:	2110      	movs	r1, #16
 80017ce:	4802      	ldr	r0, [pc, #8]	; (80017d8 <setH+0x3c>)
 80017d0:	f7ff fd1b 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	48000400 	.word	0x48000400

080017dc <setI>:

void setI(void){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f7ff fd0f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017ec:	2108      	movs	r1, #8
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f7ff fd0a 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <setJ>:

void setJ(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001800:	2101      	movs	r1, #1
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f7ff fd00 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800180a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f7ff fcfa 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001816:	2120      	movs	r1, #32
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <setJ+0x34>)
 800181a:	f7ff fcf6 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f7ff fcf0 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	48000400 	.word	0x48000400

08001834 <setK>:

void setK(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f7ff fce3 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001844:	2108      	movs	r1, #8
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f7ff fcde 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800184e:	2110      	movs	r1, #16
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <setK+0x28>)
 8001852:	f7ff fcda 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48000400 	.word	0x48000400

08001860 <setL>:

void setL(void){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001864:	2120      	movs	r1, #32
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <setL+0x28>)
 8001868:	f7ff fccf 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800186c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f7ff fcc9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001878:	2108      	movs	r1, #8
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f7ff fcc4 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	48000400 	.word	0x48000400

0800188c <setM>:

void setM(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001890:	2101      	movs	r1, #1
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f7ff fcb8 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f7ff fcb2 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f7ff fcac 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80018b2:	2108      	movs	r1, #8
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f7ff fca7 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <setN>:

void setN(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80018c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f7ff fc9d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f7ff fc97 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018dc:	2110      	movs	r1, #16
 80018de:	4802      	ldr	r0, [pc, #8]	; (80018e8 <setN+0x28>)
 80018e0:	f7ff fc93 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	48000400 	.word	0x48000400

080018ec <setO>:

void setO(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80018f0:	2102      	movs	r1, #2
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f7ff fc88 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80018fa:	2101      	movs	r1, #1
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f7ff fc83 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f7ff fc7d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001910:	2120      	movs	r1, #32
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <setO+0x48>)
 8001914:	f7ff fc79 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f7ff fc73 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001924:	2108      	movs	r1, #8
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f7ff fc6e 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	48000400 	.word	0x48000400

08001938 <setP>:

void setP(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800193c:	2102      	movs	r1, #2
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f7ff fc62 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001946:	2101      	movs	r1, #1
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f7ff fc5d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f7ff fc57 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800195c:	2108      	movs	r1, #8
 800195e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001962:	f7ff fc52 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001966:	2110      	movs	r1, #16
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <setP+0x3c>)
 800196a:	f7ff fc4e 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	48000400 	.word	0x48000400

08001978 <setR>:
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}

void setR(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800197c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f7ff fc41 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001988:	2110      	movs	r1, #16
 800198a:	4802      	ldr	r0, [pc, #8]	; (8001994 <setR+0x1c>)
 800198c:	f7ff fc3d 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	48000400 	.word	0x48000400

08001998 <setS>:

void setS(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800199c:	2102      	movs	r1, #2
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f7ff fc32 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f7ff fc2c 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80019b2:	2120      	movs	r1, #32
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <setS+0x38>)
 80019b6:	f7ff fc28 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019ba:	2108      	movs	r1, #8
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f7ff fc23 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80019c4:	2110      	movs	r1, #16
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <setS+0x38>)
 80019c8:	f7ff fc1f 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	48000400 	.word	0x48000400

080019d4 <setT>:

void setT(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80019d8:	2120      	movs	r1, #32
 80019da:	480a      	ldr	r0, [pc, #40]	; (8001a04 <setT+0x30>)
 80019dc:	f7ff fc15 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80019e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f7ff fc0f 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019ec:	2108      	movs	r1, #8
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f7ff fc0a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80019f6:	2110      	movs	r1, #16
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <setT+0x30>)
 80019fa:	f7ff fc06 	bl	800120a <LL_GPIO_ResetOutputPin>
//	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
//	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	48000400 	.word	0x48000400

08001a08 <setU>:

void setU(void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a12:	f7ff fbfa 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1e:	f7ff fbf4 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a22:	2120      	movs	r1, #32
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <setU+0x3c>)
 8001a26:	f7ff fbf0 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f7ff fbea 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a36:	2108      	movs	r1, #8
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f7ff fbe5 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	48000400 	.word	0x48000400

08001a48 <setV>:

void setV(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f7ff fbd9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a58:	2120      	movs	r1, #32
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <setV+0x28>)
 8001a5c:	f7ff fbd5 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f7ff fbcf 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	48000400 	.word	0x48000400

08001a74 <setW>:

void setW(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a78:	2102      	movs	r1, #2
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f7ff fbc4 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a82:	2101      	movs	r1, #1
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f7ff fbbf 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a94:	f7ff fbb9 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a98:	2120      	movs	r1, #32
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <setW+0x38>)
 8001a9c:	f7ff fbb5 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	4802      	ldr	r0, [pc, #8]	; (8001aac <setW+0x38>)
 8001aa4:	f7ff fbb1 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	48000400 	.word	0x48000400

08001ab0 <setX>:

void setX(void){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f7ff fba6 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f7ff fba0 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001aca:	2110      	movs	r1, #16
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <setX+0x28>)
 8001ace:	f7ff fb9c 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	48000400 	.word	0x48000400

08001adc <setY>:

void setY(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f7ff fb90 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f7ff fb8a 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001af6:	2120      	movs	r1, #32
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <setY+0x38>)
 8001afa:	f7ff fb86 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001afe:	2108      	movs	r1, #8
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f7ff fb81 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b08:	2110      	movs	r1, #16
 8001b0a:	4802      	ldr	r0, [pc, #8]	; (8001b14 <setY+0x38>)
 8001b0c:	f7ff fb7d 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	48000400 	.word	0x48000400

08001b18 <setZ>:

void setZ(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f7ff fb72 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b26:	2101      	movs	r1, #1
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f7ff fb6d 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b30:	2120      	movs	r1, #32
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <setZ+0x38>)
 8001b34:	f7ff fb69 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f7ff fb63 	bl	800120a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b44:	2110      	movs	r1, #16
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <setZ+0x38>)
 8001b48:	f7ff fb5f 	bl	800120a <LL_GPIO_ResetOutputPin>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	48000400 	.word	0x48000400

08001b54 <updateDisplay>:
void updateDisplay(void)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e170      	b.n	8001e42 <updateDisplay+0x2ee>
	{
		switch(vypis[i])
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4abc      	ldr	r2, [pc, #752]	; (8001e54 <updateDisplay+0x300>)
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	2b5f      	cmp	r3, #95	; 0x5f
 8001b6a:	f200 812f 	bhi.w	8001dcc <updateDisplay+0x278>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <updateDisplay+0x20>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001cf5 	.word	0x08001cf5
 8001b78:	08001cfb 	.word	0x08001cfb
 8001b7c:	08001d01 	.word	0x08001d01
 8001b80:	08001d07 	.word	0x08001d07
 8001b84:	08001d0d 	.word	0x08001d0d
 8001b88:	08001d13 	.word	0x08001d13
 8001b8c:	08001d19 	.word	0x08001d19
 8001b90:	08001d1f 	.word	0x08001d1f
 8001b94:	08001d25 	.word	0x08001d25
 8001b98:	08001d2b 	.word	0x08001d2b
 8001b9c:	08001dcd 	.word	0x08001dcd
 8001ba0:	08001dcd 	.word	0x08001dcd
 8001ba4:	08001dcd 	.word	0x08001dcd
 8001ba8:	08001dcd 	.word	0x08001dcd
 8001bac:	08001dcd 	.word	0x08001dcd
 8001bb0:	08001dcd 	.word	0x08001dcd
 8001bb4:	08001dcd 	.word	0x08001dcd
 8001bb8:	08001dcd 	.word	0x08001dcd
 8001bbc:	08001dcd 	.word	0x08001dcd
 8001bc0:	08001dcd 	.word	0x08001dcd
 8001bc4:	08001dcd 	.word	0x08001dcd
 8001bc8:	08001dcd 	.word	0x08001dcd
 8001bcc:	08001dcd 	.word	0x08001dcd
 8001bd0:	08001dcd 	.word	0x08001dcd
 8001bd4:	08001dcd 	.word	0x08001dcd
 8001bd8:	08001dcd 	.word	0x08001dcd
 8001bdc:	08001dcd 	.word	0x08001dcd
 8001be0:	08001dcd 	.word	0x08001dcd
 8001be4:	08001dcd 	.word	0x08001dcd
 8001be8:	08001dcd 	.word	0x08001dcd
 8001bec:	08001dcd 	.word	0x08001dcd
 8001bf0:	08001dcd 	.word	0x08001dcd
 8001bf4:	08001dcd 	.word	0x08001dcd
 8001bf8:	08001dcd 	.word	0x08001dcd
 8001bfc:	08001dcd 	.word	0x08001dcd
 8001c00:	08001dcd 	.word	0x08001dcd
 8001c04:	08001dcd 	.word	0x08001dcd
 8001c08:	08001dcd 	.word	0x08001dcd
 8001c0c:	08001dcd 	.word	0x08001dcd
 8001c10:	08001dcd 	.word	0x08001dcd
 8001c14:	08001dcd 	.word	0x08001dcd
 8001c18:	08001dcd 	.word	0x08001dcd
 8001c1c:	08001dcd 	.word	0x08001dcd
 8001c20:	08001dcd 	.word	0x08001dcd
 8001c24:	08001dcd 	.word	0x08001dcd
 8001c28:	08001dcd 	.word	0x08001dcd
 8001c2c:	08001dcd 	.word	0x08001dcd
 8001c30:	08001dcd 	.word	0x08001dcd
 8001c34:	08001dcd 	.word	0x08001dcd
 8001c38:	08001dcd 	.word	0x08001dcd
 8001c3c:	08001dcd 	.word	0x08001dcd
 8001c40:	08001dcd 	.word	0x08001dcd
 8001c44:	08001dcd 	.word	0x08001dcd
 8001c48:	08001dcd 	.word	0x08001dcd
 8001c4c:	08001dcd 	.word	0x08001dcd
 8001c50:	08001dcd 	.word	0x08001dcd
 8001c54:	08001dcd 	.word	0x08001dcd
 8001c58:	08001dcd 	.word	0x08001dcd
 8001c5c:	08001dcd 	.word	0x08001dcd
 8001c60:	08001dcd 	.word	0x08001dcd
 8001c64:	08001dcd 	.word	0x08001dcd
 8001c68:	08001dcd 	.word	0x08001dcd
 8001c6c:	08001dcd 	.word	0x08001dcd
 8001c70:	08001dcd 	.word	0x08001dcd
 8001c74:	08001dcd 	.word	0x08001dcd
 8001c78:	08001d37 	.word	0x08001d37
 8001c7c:	08001d3d 	.word	0x08001d3d
 8001c80:	08001d43 	.word	0x08001d43
 8001c84:	08001d49 	.word	0x08001d49
 8001c88:	08001d4f 	.word	0x08001d4f
 8001c8c:	08001d55 	.word	0x08001d55
 8001c90:	08001d5b 	.word	0x08001d5b
 8001c94:	08001d61 	.word	0x08001d61
 8001c98:	08001d67 	.word	0x08001d67
 8001c9c:	08001d6d 	.word	0x08001d6d
 8001ca0:	08001d73 	.word	0x08001d73
 8001ca4:	08001d79 	.word	0x08001d79
 8001ca8:	08001d7f 	.word	0x08001d7f
 8001cac:	08001d85 	.word	0x08001d85
 8001cb0:	08001d8b 	.word	0x08001d8b
 8001cb4:	08001d91 	.word	0x08001d91
 8001cb8:	08001dcd 	.word	0x08001dcd
 8001cbc:	08001d97 	.word	0x08001d97
 8001cc0:	08001d9d 	.word	0x08001d9d
 8001cc4:	08001da3 	.word	0x08001da3
 8001cc8:	08001da9 	.word	0x08001da9
 8001ccc:	08001daf 	.word	0x08001daf
 8001cd0:	08001db5 	.word	0x08001db5
 8001cd4:	08001dbb 	.word	0x08001dbb
 8001cd8:	08001dc1 	.word	0x08001dc1
 8001cdc:	08001dc7 	.word	0x08001dc7
 8001ce0:	08001dcd 	.word	0x08001dcd
 8001ce4:	08001dcd 	.word	0x08001dcd
 8001ce8:	08001dcd 	.word	0x08001dcd
 8001cec:	08001dcd 	.word	0x08001dcd
 8001cf0:	08001d31 	.word	0x08001d31
		{
			case 0:setZero();break;
 8001cf4:	f7ff fc3a 	bl	800156c <setZero>
 8001cf8:	e068      	b.n	8001dcc <updateDisplay+0x278>
			case 1:setOne();break;
 8001cfa:	f7ff fb31 	bl	8001360 <setOne>
 8001cfe:	e065      	b.n	8001dcc <updateDisplay+0x278>
			case 2:setTwo();break;
 8001d00:	f7ff fb3e 	bl	8001380 <setTwo>
 8001d04:	e062      	b.n	8001dcc <updateDisplay+0x278>
			case 3:setThree();break;
 8001d06:	f7ff fb59 	bl	80013bc <setThree>
 8001d0a:	e05f      	b.n	8001dcc <updateDisplay+0x278>
			case 4:setFour();break;
 8001d0c:	f7ff fb74 	bl	80013f8 <setFour>
 8001d10:	e05c      	b.n	8001dcc <updateDisplay+0x278>
			case 5:setFive();break;
 8001d12:	f7ff fb8b 	bl	800142c <setFive>
 8001d16:	e059      	b.n	8001dcc <updateDisplay+0x278>
			case 6:setSix();break;
 8001d18:	f7ff fba6 	bl	8001468 <setSix>
 8001d1c:	e056      	b.n	8001dcc <updateDisplay+0x278>
			case 7:setSeven();break;
 8001d1e:	f7ff fbc7 	bl	80014b0 <setSeven>
 8001d22:	e053      	b.n	8001dcc <updateDisplay+0x278>
			case 8:setEight();break;
 8001d24:	f7ff fbd8 	bl	80014d8 <setEight>
 8001d28:	e050      	b.n	8001dcc <updateDisplay+0x278>
			case 9:setNine();break;
 8001d2a:	f7ff fbff 	bl	800152c <setNine>
 8001d2e:	e04d      	b.n	8001dcc <updateDisplay+0x278>

			case '_':setMedzera();break;
 8001d30:	f7ff fc42 	bl	80015b8 <setMedzera>
 8001d34:	e04a      	b.n	8001dcc <updateDisplay+0x278>
			case 'A':setA();break;
 8001d36:	f7ff fc49 	bl	80015cc <setA>
 8001d3a:	e047      	b.n	8001dcc <updateDisplay+0x278>
			case 'B':setB();break;
 8001d3c:	f7ff fc6c 	bl	8001618 <setB>
 8001d40:	e044      	b.n	8001dcc <updateDisplay+0x278>
			case 'C':setC();break;
 8001d42:	f7ff fc93 	bl	800166c <setC>
 8001d46:	e041      	b.n	8001dcc <updateDisplay+0x278>
			case 'D':setD();break;
 8001d48:	f7ff fcaa 	bl	80016a0 <setD>
 8001d4c:	e03e      	b.n	8001dcc <updateDisplay+0x278>
			case 'E':setE();break;
 8001d4e:	f7ff fccd 	bl	80016ec <setE>
 8001d52:	e03b      	b.n	8001dcc <updateDisplay+0x278>
			case 'F':setF();break;
 8001d54:	f7ff fce8 	bl	8001728 <setF>
 8001d58:	e038      	b.n	8001dcc <updateDisplay+0x278>
			case 'G':setG();break;
 8001d5a:	f7ff fcff 	bl	800175c <setG>
 8001d5e:	e035      	b.n	8001dcc <updateDisplay+0x278>
			case 'H':setH();break;
 8001d60:	f7ff fd1c 	bl	800179c <setH>
 8001d64:	e032      	b.n	8001dcc <updateDisplay+0x278>
			case 'I':setI();break;
 8001d66:	f7ff fd39 	bl	80017dc <setI>
 8001d6a:	e02f      	b.n	8001dcc <updateDisplay+0x278>
			case 'J':setJ();break;
 8001d6c:	f7ff fd46 	bl	80017fc <setJ>
 8001d70:	e02c      	b.n	8001dcc <updateDisplay+0x278>
			case 'K':setK();break;
 8001d72:	f7ff fd5f 	bl	8001834 <setK>
 8001d76:	e029      	b.n	8001dcc <updateDisplay+0x278>
			case 'L':setL();break;
 8001d78:	f7ff fd72 	bl	8001860 <setL>
 8001d7c:	e026      	b.n	8001dcc <updateDisplay+0x278>
			case 'M':setM();break;
 8001d7e:	f7ff fd85 	bl	800188c <setM>
 8001d82:	e023      	b.n	8001dcc <updateDisplay+0x278>
			case 'N':setN();break;
 8001d84:	f7ff fd9c 	bl	80018c0 <setN>
 8001d88:	e020      	b.n	8001dcc <updateDisplay+0x278>
			case 'O':setO();break;
 8001d8a:	f7ff fdaf 	bl	80018ec <setO>
 8001d8e:	e01d      	b.n	8001dcc <updateDisplay+0x278>
			case 'P':setP();break;
 8001d90:	f7ff fdd2 	bl	8001938 <setP>
 8001d94:	e01a      	b.n	8001dcc <updateDisplay+0x278>
			case 'R':setR();break;
 8001d96:	f7ff fdef 	bl	8001978 <setR>
 8001d9a:	e017      	b.n	8001dcc <updateDisplay+0x278>
			case 'S':setS();break;
 8001d9c:	f7ff fdfc 	bl	8001998 <setS>
 8001da0:	e014      	b.n	8001dcc <updateDisplay+0x278>
			case 'T':setT();break;
 8001da2:	f7ff fe17 	bl	80019d4 <setT>
 8001da6:	e011      	b.n	8001dcc <updateDisplay+0x278>
			case 'U':setU();break;
 8001da8:	f7ff fe2e 	bl	8001a08 <setU>
 8001dac:	e00e      	b.n	8001dcc <updateDisplay+0x278>
			case 'V':setV();break;
 8001dae:	f7ff fe4b 	bl	8001a48 <setV>
 8001db2:	e00b      	b.n	8001dcc <updateDisplay+0x278>
			case 'W':setW();break;
 8001db4:	f7ff fe5e 	bl	8001a74 <setW>
 8001db8:	e008      	b.n	8001dcc <updateDisplay+0x278>
			case 'X':setX();break;
 8001dba:	f7ff fe79 	bl	8001ab0 <setX>
 8001dbe:	e005      	b.n	8001dcc <updateDisplay+0x278>
			case 'Y':setY();break;
 8001dc0:	f7ff fe8c 	bl	8001adc <setY>
 8001dc4:	e002      	b.n	8001dcc <updateDisplay+0x278>
			case 'Z':setZ();break;
 8001dc6:	f7ff fea7 	bl	8001b18 <setZ>
 8001dca:	bf00      	nop
		}

		if(i == 0)DIGIT_1_ON;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <updateDisplay+0x286>
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4820      	ldr	r0, [pc, #128]	; (8001e58 <updateDisplay+0x304>)
 8001dd6:	f7ff fa0a 	bl	80011ee <LL_GPIO_SetOutputPin>
		if(i == 1)DIGIT_2_ON;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d104      	bne.n	8001dea <updateDisplay+0x296>
 8001de0:	2110      	movs	r1, #16
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f7ff fa02 	bl	80011ee <LL_GPIO_SetOutputPin>
		if(i == 2)DIGIT_3_ON;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d105      	bne.n	8001dfc <updateDisplay+0x2a8>
 8001df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f7ff f9f9 	bl	80011ee <LL_GPIO_SetOutputPin>
		if(i == 3)DIGIT_4_ON;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d104      	bne.n	8001e0c <updateDisplay+0x2b8>
 8001e02:	2104      	movs	r1, #4
 8001e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e08:	f7ff f9f1 	bl	80011ee <LL_GPIO_SetOutputPin>

		disp_time_saved = disp_time;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <updateDisplay+0x308>)
 8001e0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <updateDisplay+0x30c>)
 8001e14:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8001e18:	bf00      	nop
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <updateDisplay+0x30c>)
 8001e1c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e20:	1c8b      	adds	r3, r1, #2
 8001e22:	f142 0400 	adc.w	r4, r2, #0
 8001e26:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <updateDisplay+0x308>)
 8001e28:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001e2c:	42a2      	cmp	r2, r4
 8001e2e:	bf08      	it	eq
 8001e30:	4299      	cmpeq	r1, r3
 8001e32:	d3f2      	bcc.n	8001e1a <updateDisplay+0x2c6>
		resetDigits();
 8001e34:	f7ff fa54 	bl	80012e0 <resetDigits>
		resetSegments();
 8001e38:	f7ff f9f6 	bl	8001228 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	f67f ae8b 	bls.w	8001b60 <updateDisplay+0xc>
	}


}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000003c 	.word	0x2000003c
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	20000028 	.word	0x20000028
 8001e60:	20000030 	.word	0x20000030

08001e64 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001e68:	4806      	ldr	r0, [pc, #24]	; (8001e84 <TIM3_IRQHandler+0x20>)
 8001e6a:	f7ff f9ad 	bl	80011c8 <LL_TIM_IsActiveFlag_UPDATE>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001e74:	f7ff fe6e 	bl	8001b54 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM3_IRQHandler+0x20>)
 8001e7a:	f7ff f997 	bl	80011ac <LL_TIM_ClearFlag_UPDATE>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40000400 	.word	0x40000400

08001e88 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <NVIC_EnableIRQ+0x30>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da0b      	bge.n	8001f04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <NVIC_SetPriority+0x4c>)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f02:	e009      	b.n	8001f18 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <NVIC_SetPriority+0x50>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <LL_SYSCFG_SetEXTISource+0x54>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	ea02 0103 	and.w	r1, r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <LL_SYSCFG_SetEXTISource+0x54>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	430a      	orrs	r2, r1
 8002004:	3302      	adds	r3, #2
 8002006:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000

0800201c <LL_GPIO_SetPinMode>:
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	613b      	str	r3, [r7, #16]
  return(result);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2103      	movs	r1, #3
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	61bb      	str	r3, [r7, #24]
  return(result);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_GPIO_SetPinPull>:
{
 8002076:	b480      	push	{r7}
 8002078:	b089      	sub	sp, #36	; 0x24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	613b      	str	r3, [r7, #16]
  return(result);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2103      	movs	r1, #3
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3724      	adds	r7, #36	; 0x24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_GPIO_ResetOutputPin>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002104:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002108:	f7ff ff44 	bl	8001f94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800210c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002110:	f7ff ff40 	bl	8001f94 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8002114:	f640 111b 	movw	r1, #2331	; 0x91b
 8002118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211c:	f7ff ffd8 	bl	80020d0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8002120:	2132      	movs	r1, #50	; 0x32
 8002122:	482d      	ldr	r0, [pc, #180]	; (80021d8 <MX_GPIO_Init+0xec>)
 8002124:	f7ff ffd4 	bl	80020d0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8002128:	f641 139f 	movw	r3, #6559	; 0x199f
 800212c:	613b      	str	r3, [r7, #16]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f7fe fb51 	bl	80007ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 800214c:	2333      	movs	r3, #51	; 0x33
 800214e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4619      	mov	r1, r3
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <MX_GPIO_Init+0xec>)
 8002168:	f7fe fb41 	bl	80007ee <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

  //BUTTON
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8002176:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff ff22 	bl	8001fc4 <LL_SYSCFG_SetEXTISource>
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP); //PUL DOWN???
 8002180:	2201      	movs	r2, #1
 8002182:	2108      	movs	r1, #8
 8002184:	4814      	ldr	r0, [pc, #80]	; (80021d8 <MX_GPIO_Init+0xec>)
 8002186:	f7ff ff76 	bl	8002076 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 800218a:	2200      	movs	r2, #0
 800218c:	2108      	movs	r1, #8
 800218e:	4812      	ldr	r0, [pc, #72]	; (80021d8 <MX_GPIO_Init+0xec>)
 8002190:	f7ff ff44 	bl	800201c <LL_GPIO_SetPinMode>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002194:	2308      	movs	r3, #8
 8002196:	607b      	str	r3, [r7, #4]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	737b      	strb	r3, [r7, #13]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80021a4:	2302      	movs	r3, #2
 80021a6:	73bb      	strb	r3, [r7, #14]
  LL_EXTI_Init(&EXTI_InitStruct);
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f93c 	bl	8000428 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021b0:	f7ff fe6a 	bl	8001e88 <NVIC_GetPriorityGrouping>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff feb6 	bl	8001f2c <NVIC_EncodePriority>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	2009      	movs	r0, #9
 80021c6:	f7ff fe87 	bl	8001ed8 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80021ca:	2009      	movs	r0, #9
 80021cc:	f7ff fe6a 	bl	8001ea4 <NVIC_EnableIRQ>


}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	48000400 	.word	0x48000400

080021dc <NVIC_SetPriorityGrouping>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <LL_RCC_HSI_Enable+0x1c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <LL_RCC_HSI_Enable+0x1c>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <LL_RCC_HSI_IsReady+0x20>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000

08002268 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <LL_RCC_SetSysClkSource+0x24>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <LL_RCC_SetSysClkSource+0x24>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <LL_RCC_GetSysClkSource+0x18>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <LL_RCC_SetAHBPrescaler+0x24>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <LL_RCC_SetAHBPrescaler+0x24>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000

08002300 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <LL_RCC_SetAPB1Prescaler+0x24>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <LL_RCC_SetAPB2Prescaler+0x24>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000

08002350 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000

08002380 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <LL_FLASH_SetLatency+0x24>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <LL_FLASH_SetLatency+0x24>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40022000 	.word	0x40022000

080023d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <LL_FLASH_GetLatency+0x18>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40022000 	.word	0x40022000

080023f4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d106      	bne.n	8002410 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <LL_SYSTICK_SetClkSource+0x34>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <LL_SYSTICK_SetClkSource+0x34>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800240e:	e005      	b.n	800241c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <LL_SYSTICK_SetClkSource+0x34>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <LL_SYSTICK_SetClkSource+0x34>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e010 	.word	0xe000e010

0800242c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <LL_SYSTICK_EnableIT+0x1c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <LL_SYSTICK_EnableIT+0x1c>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <main>:
int poc = 0;
int smer = 0;
int text[50] = {'L','U','K','A','S','_','K','O','N','C','A','L','_',8,6,1,1,9};

int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff ff94 	bl	8002380 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002458:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800245c:	f7ff ff78 	bl	8002350 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f7ff febb 	bl	80021dc <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8002466:	f000 f847 	bl	80024f8 <SystemClock_Config>

  MX_GPIO_Init();
 800246a:	f7ff fe3f 	bl	80020ec <MX_GPIO_Init>

  setSegments();
 800246e:	f7fe ff09 	bl	8001284 <setSegments>
  setDigits();
 8002472:	f7fe ff55 	bl	8001320 <setDigits>

  LL_mDelay(2000);
 8002476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800247a:	f7fe fe63 	bl	8001144 <LL_mDelay>

  resetDigits();
 800247e:	f7fe ff2f 	bl	80012e0 <resetDigits>
  resetSegments();
 8002482:	f7fe fed1 	bl	8001228 <resetSegments>

  MX_TIM3_Init();
 8002486:	f000 fae3 	bl	8002a50 <MX_TIM3_Init>


 int test = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
	  	  if(poc==0)smer=0;

	  	  LL_mDelay(500);
*/
	  	  //test github
	  	if(menu==0) {
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <main+0xa4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <main+0x62>
	    	vypis[0]=1;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <main+0xa8>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
	    	vypis[1]=1;
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <main+0xa8>)
 800249e:	2201      	movs	r2, #1
 80024a0:	605a      	str	r2, [r3, #4]
	    	vypis[2]=1;
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <main+0xa8>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	609a      	str	r2, [r3, #8]
	    	vypis[3]=1;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <main+0xa8>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	60da      	str	r2, [r3, #12]
	    }

	  	if(menu==1) {
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <main+0xa4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10b      	bne.n	80024ce <main+0x82>
	  		    	vypis[0]=2;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <main+0xa8>)
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
	  		    	vypis[1]=2;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <main+0xa8>)
 80024be:	2202      	movs	r2, #2
 80024c0:	605a      	str	r2, [r3, #4]
	  		    	vypis[2]=2;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <main+0xa8>)
 80024c4:	2202      	movs	r2, #2
 80024c6:	609a      	str	r2, [r3, #8]
	  		    	vypis[3]=2;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <main+0xa8>)
 80024ca:	2202      	movs	r2, #2
 80024cc:	60da      	str	r2, [r3, #12]
	  		    }
	  	if(menu==2) {
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <main+0xa4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d1db      	bne.n	800248e <main+0x42>
	  		    	vypis[0]=3;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <main+0xa8>)
 80024d8:	2203      	movs	r2, #3
 80024da:	601a      	str	r2, [r3, #0]
	  		    	vypis[1]=3;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <main+0xa8>)
 80024de:	2203      	movs	r2, #3
 80024e0:	605a      	str	r2, [r3, #4]
	  		    	vypis[2]=3;
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <main+0xa8>)
 80024e4:	2203      	movs	r2, #3
 80024e6:	609a      	str	r2, [r3, #8]
	  		    	vypis[3]=3;
 80024e8:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <main+0xa8>)
 80024ea:	2203      	movs	r2, #3
 80024ec:	60da      	str	r2, [r3, #12]
	  	if(menu==0) {
 80024ee:	e7ce      	b.n	800248e <main+0x42>
 80024f0:	20000038 	.word	0x20000038
 80024f4:	2000003c 	.word	0x2000003c

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ff57 	bl	80023b0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002502:	f7ff ff69 	bl	80023d8 <LL_FLASH_GetLatency>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800250c:	f000 f82c 	bl	8002568 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002510:	f7ff fe88 	bl	8002224 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002514:	bf00      	nop
 8002516:	f7ff fe95 	bl	8002244 <LL_RCC_HSI_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d1fa      	bne.n	8002516 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002520:	2010      	movs	r0, #16
 8002522:	f7ff fea1 	bl	8002268 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fed6 	bl	80022d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fee7 	bl	8002300 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff fef8 	bl	8002328 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff feab 	bl	8002294 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800253e:	bf00      	nop
 8002540:	f7ff febc 	bl	80022bc <LL_RCC_GetSysClkSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1fa      	bne.n	8002540 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <SystemClock_Config+0x6c>)
 800254c:	f7fe fdec 	bl	8001128 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002550:	2004      	movs	r0, #4
 8002552:	f7ff ff4f 	bl	80023f4 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8002556:	f7ff ff69 	bl	800242c <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 800255a:	4802      	ldr	r0, [pc, #8]	; (8002564 <SystemClock_Config+0x6c>)
 800255c:	f7fe fe16 	bl	800118c <LL_SetSystemCoreClock>
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	007a1200 	.word	0x007a1200

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40010400 	.word	0x40010400

080025a4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6153      	str	r3, [r2, #20]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40010400 	.word	0x40010400

080025c4 <LL_GPIO_IsInputPinSet>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4013      	ands	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <HardFault_Handler+0x4>

08002602 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <MemManage_Handler+0x4>

08002608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <BusFault_Handler+0x4>

0800260e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <UsageFault_Handler+0x4>

08002614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b490      	push	{r4, r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <SysTick_Handler+0x20>)
 8002646:	e9d3 1200 	ldrd	r1, r2, [r3]
 800264a:	1c4b      	adds	r3, r1, #1
 800264c:	f142 0400 	adc.w	r4, r2, #0
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <SysTick_Handler+0x20>)
 8002652:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc90      	pop	{r4, r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000028 	.word	0x20000028

08002664 <check_button_state>:

uint8_t check_button_state(GPIO_TypeDef* PORT, uint8_t PIN)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
	uint8_t button_state = 0, timeout = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	2300      	movs	r3, #0
 8002676:	73bb      	strb	r3, [r7, #14]

	while(button_state < 5 && timeout < 100)
 8002678:	e013      	b.n	80026a2 <check_button_state+0x3e>
	{
		if(LL_GPIO_IsInputPinSet(PORT, PIN))
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa0 	bl	80025c4 <LL_GPIO_IsInputPinSet>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <check_button_state+0x2e>
		{
			button_state += 1;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3301      	adds	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <check_button_state+0x32>
		}
		else
		{
			button_state = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
		}

		timeout += 1;
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	3301      	adds	r3, #1
 800269a:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 800269c:	2001      	movs	r0, #1
 800269e:	f7fe fd51 	bl	8001144 <LL_mDelay>
	while(button_state < 5 && timeout < 100)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d802      	bhi.n	80026ae <check_button_state+0x4a>
 80026a8:	7bbb      	ldrb	r3, [r7, #14]
 80026aa:	2b63      	cmp	r3, #99	; 0x63
 80026ac:	d9e5      	bls.n	800267a <check_button_state+0x16>
	}

	if((button_state >= 5) && (timeout <= 100))
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d904      	bls.n	80026be <check_button_state+0x5a>
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d801      	bhi.n	80026be <check_button_state+0x5a>
	{
		return 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <check_button_state+0x5c>
	}
	else
	{
		return 0;
 80026be:	2300      	movs	r3, #0
	}
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	extern uint8_t interrupt;
	extern int menu;

	if(check_button_state(btn_GPIO_Port, btn_Pin)) {
 80026cc:	2108      	movs	r1, #8
 80026ce:	480f      	ldr	r0, [pc, #60]	; (800270c <EXTI3_IRQHandler+0x44>)
 80026d0:	f7ff ffc8 	bl	8002664 <check_button_state>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <EXTI3_IRQHandler+0x2c>
		//interrupt ^= 1;

		if(menu==2){
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <EXTI3_IRQHandler+0x48>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d103      	bne.n	80026ea <EXTI3_IRQHandler+0x22>
			menu=0;}
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <EXTI3_IRQHandler+0x48>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e004      	b.n	80026f4 <EXTI3_IRQHandler+0x2c>
		else{
			menu++;
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <EXTI3_IRQHandler+0x48>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <EXTI3_IRQHandler+0x48>)
 80026f2:	6013      	str	r3, [r2, #0]
		}
	}
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80026f4:	2008      	movs	r0, #8
 80026f6:	f7ff ff3f 	bl	8002578 <LL_EXTI_IsActiveFlag_0_31>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <EXTI3_IRQHandler+0x3e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002700:	2008      	movs	r0, #8
 8002702:	f7ff ff4f 	bl	80025a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	48000400 	.word	0x48000400
 8002710:	20000038 	.word	0x20000038

08002714 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <SystemInit+0x84>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <SystemInit+0x84>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <SystemInit+0x88>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <SystemInit+0x88>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <SystemInit+0x88>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4918      	ldr	r1, [pc, #96]	; (800279c <SystemInit+0x88>)
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <SystemInit+0x8c>)
 800273c:	4013      	ands	r3, r2
 800273e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <SystemInit+0x88>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <SystemInit+0x88>)
 8002746:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <SystemInit+0x88>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <SystemInit+0x88>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <SystemInit+0x88>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <SystemInit+0x88>)
 8002762:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002766:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <SystemInit+0x88>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <SystemInit+0x88>)
 800276e:	f023 030f 	bic.w	r3, r3, #15
 8002772:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <SystemInit+0x88>)
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	4908      	ldr	r1, [pc, #32]	; (800279c <SystemInit+0x88>)
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <SystemInit+0x90>)
 800277c:	4013      	ands	r3, r2
 800277e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <SystemInit+0x88>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SystemInit+0x84>)
 8002788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278c:	609a      	str	r2, [r3, #8]
#endif
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	40021000 	.word	0x40021000
 80027a0:	f87fc00c 	.word	0xf87fc00c
 80027a4:	ff00fccc 	.word	0xff00fccc

080027a8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	; (80027f4 <NVIC_EnableIRQ+0x30>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0b      	bge.n	8002824 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	; (8002844 <NVIC_SetPriority+0x4c>)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	3b04      	subs	r3, #4
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002822:	e009      	b.n	8002838 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <NVIC_SetPriority+0x50>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00
 8002848:	e000e100 	.word	0xe000e100

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40021000 	.word	0x40021000

080028e4 <LL_TIM_EnableCounter>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_TIM_EnableARRPreload>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_TIM_OC_DisableFast>:
{
 8002924:	b4b0      	push	{r4, r5, r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d028      	beq.n	8002986 <LL_TIM_OC_DisableFast+0x62>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d023      	beq.n	8002982 <LL_TIM_OC_DisableFast+0x5e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d01e      	beq.n	800297e <LL_TIM_OC_DisableFast+0x5a>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d019      	beq.n	800297a <LL_TIM_OC_DisableFast+0x56>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d013      	beq.n	8002976 <LL_TIM_OC_DisableFast+0x52>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d00d      	beq.n	8002972 <LL_TIM_OC_DisableFast+0x4e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295c:	d007      	beq.n	800296e <LL_TIM_OC_DisableFast+0x4a>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d101      	bne.n	800296a <LL_TIM_OC_DisableFast+0x46>
 8002966:	2307      	movs	r3, #7
 8002968:	e00e      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 800296a:	2308      	movs	r3, #8
 800296c:	e00c      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 800296e:	2306      	movs	r3, #6
 8002970:	e00a      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 8002972:	2305      	movs	r3, #5
 8002974:	e008      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 8002976:	2304      	movs	r3, #4
 8002978:	e006      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_TIM_OC_DisableFast+0x64>
 8002986:	2300      	movs	r3, #0
 8002988:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3318      	adds	r3, #24
 800298e:	461a      	mov	r2, r3
 8002990:	4629      	mov	r1, r5
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <LL_TIM_OC_DisableFast+0x94>)
 8002994:	5c5b      	ldrb	r3, [r3, r1]
 8002996:	4413      	add	r3, r2
 8002998:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	4629      	mov	r1, r5
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <LL_TIM_OC_DisableFast+0x98>)
 80029a0:	5c5b      	ldrb	r3, [r3, r1]
 80029a2:	4619      	mov	r1, r3
 80029a4:	2304      	movs	r3, #4
 80029a6:	408b      	lsls	r3, r1
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4013      	ands	r3, r2
 80029ac:	6023      	str	r3, [r4, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bcb0      	pop	{r4, r5, r7}
 80029b6:	4770      	bx	lr
 80029b8:	08002bd8 	.word	0x08002bd8
 80029bc:	08002be4 	.word	0x08002be4

080029c0 <LL_TIM_SetClockSource>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_TIM_SetTriggerOutput>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	605a      	str	r2, [r3, #4]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_TIM_DisableMasterSlaveMode>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_TIM_EnableIT_UPDATE>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2220      	movs	r2, #32
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f89f 	bl	8002bb0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002a72:	2002      	movs	r0, #2
 8002a74:	f7ff ff1e 	bl	80028b4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8002a78:	f7ff fe96 	bl	80027a8 <NVIC_GetPriorityGrouping>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2202      	movs	r2, #2
 8002a80:	2102      	movs	r1, #2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fee2 	bl	800284c <NVIC_EncodePriority>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	201d      	movs	r0, #29
 8002a8e:	f7ff feb3 	bl	80027f8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002a92:	201d      	movs	r0, #29
 8002a94:	f7ff fe96 	bl	80027c4 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8002a98:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8002aa2:	2313      	movs	r3, #19
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4817      	ldr	r0, [pc, #92]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002ab2:	f7fd ffa5 	bl	8000a00 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8002ab6:	4816      	ldr	r0, [pc, #88]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002ab8:	f7ff ff24 	bl	8002904 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002abc:	2100      	movs	r1, #0
 8002abe:	4814      	ldr	r0, [pc, #80]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002ac0:	f7ff ff7e 	bl	80029c0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	461a      	mov	r2, r3
 8002adc:	2101      	movs	r1, #1
 8002ade:	480c      	ldr	r0, [pc, #48]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002ae0:	f7fe f802 	bl	8000ae8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	480a      	ldr	r0, [pc, #40]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002ae8:	f7ff ff1c 	bl	8002924 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002aec:	2100      	movs	r1, #0
 8002aee:	4808      	ldr	r0, [pc, #32]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002af0:	f7ff ff7b 	bl	80029ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002af4:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002af6:	f7ff ff8b 	bl	8002a10 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002afc:	f7ff ff98 	bl	8002a30 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MX_TIM3_Init+0xc0>)
 8002b02:	f7ff feef 	bl	80028e4 <LL_TIM_EnableCounter>

}
 8002b06:	bf00      	nop
 8002b08:	3738      	adds	r7, #56	; 0x38
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40000400 	.word	0x40000400

08002b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b1a:	e003      	b.n	8002b24 <LoopCopyDataInit>

08002b1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b22:	3104      	adds	r1, #4

08002b24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b24:	480b      	ldr	r0, [pc, #44]	; (8002b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b2c:	d3f6      	bcc.n	8002b1c <CopyDataInit>
	ldr	r2, =_sbss
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b30:	e002      	b.n	8002b38 <LoopFillZerobss>

08002b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b34:	f842 3b04 	str.w	r3, [r2], #4

08002b38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <LoopForever+0x16>)
	cmp	r2, r3
 8002b3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b3c:	d3f9      	bcc.n	8002b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b3e:	f7ff fde9 	bl	8002714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b42:	f000 f811 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b46:	f7ff fc81 	bl	800244c <main>

08002b4a <LoopForever>:

LoopForever:
    b LoopForever
 8002b4a:	e7fe      	b.n	8002b4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b4c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002b50:	08002bf8 	.word	0x08002bf8
	ldr	r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b58:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002b5c:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002b60:	20000058 	.word	0x20000058

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	4e0d      	ldr	r6, [pc, #52]	; (8002ba0 <__libc_init_array+0x38>)
 8002b6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ba4 <__libc_init_array+0x3c>)
 8002b6e:	1ba4      	subs	r4, r4, r6
 8002b70:	10a4      	asrs	r4, r4, #2
 8002b72:	2500      	movs	r5, #0
 8002b74:	42a5      	cmp	r5, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	4e0b      	ldr	r6, [pc, #44]	; (8002ba8 <__libc_init_array+0x40>)
 8002b7a:	4c0c      	ldr	r4, [pc, #48]	; (8002bac <__libc_init_array+0x44>)
 8002b7c:	f000 f820 	bl	8002bc0 <_init>
 8002b80:	1ba4      	subs	r4, r4, r6
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	2500      	movs	r5, #0
 8002b86:	42a5      	cmp	r5, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b90:	4798      	blx	r3
 8002b92:	3501      	adds	r5, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b9a:	4798      	blx	r3
 8002b9c:	3501      	adds	r5, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08002bf0 	.word	0x08002bf0
 8002ba4:	08002bf0 	.word	0x08002bf0
 8002ba8:	08002bf0 	.word	0x08002bf0
 8002bac:	08002bf4 	.word	0x08002bf4

08002bb0 <memset>:
 8002bb0:	4402      	add	r2, r0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
